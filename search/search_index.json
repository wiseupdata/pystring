{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Extend your string powers with Str+","text":"<p>Features \u2728\ufe0f</p> <ul> <li>Wrapper Class</li> <li>+421 test covered in 36 Tests files!</li> <li>Simple use!</li> <li>Made with A.I. contribution \ud83e\udd16 </li> </ul>"},{"location":"#install","title":"Install \ud83d\udcc0","text":"<pre><code>pip install strplus\n</code></pre>"},{"location":"#main-class","title":"Main Class: \ud83d\ude80","text":""},{"location":"#strplus.strplus.Str","title":"<code>Str</code>","text":"<p>         Bases: <code>str</code></p> <p>Str Class</p> <p>The Str Class is a Wrapper class that extends the str Class, giving it superpowers to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want! All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.</p> <p>Easy and simple no parentheses!</p> Snake caseCamel casePascal <p><pre><code>my_string = Str(\"Cast_this_StringToSnake\")\nmy_string.snake\n</code></pre> cast_this_string_to_snake</p> <p><pre><code>my_string = Str(\"cast_this_string_to_camel\")\nmy_string.camel\n</code></pre> castThisStringToCamel</p> <p><pre><code>my_string = Str(\"Cast_this_string_TO_Pascal!\")\nmy_string.pascal\n</code></pre> CastThisStringToPascal</p> <p>Use parentheses if you prefer!</p> <p><pre><code>my_string = Str(\"HelloWorld\")\nmy_string.to_snake()\n</code></pre> hello_world</p> Source code in <code>strplus/strplus.py</code> <pre><code>class Str(str):\n\"\"\"\n\n    !!! Info \"Str Class\"\n\n        The Str Class is a Wrapper class that extends the str Class, giving it superpowers\n        to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want!\n        All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.\n\n    !!! Example \"Easy and simple no parentheses!\"\n\n        === \"Snake case\"\n            ```python\n            my_string = Str(\"Cast_this_StringToSnake\")\n            my_string.snake\n            ```\n            cast_this_string_to_snake\n\n        === \"Camel case\"\n            ```python\n            my_string = Str(\"cast_this_string_to_camel\")\n            my_string.camel\n            ```\n            castThisStringToCamel\n\n        === \"Pascal\"\n            ```python\n            my_string = Str(\"Cast_this_string_TO_Pascal!\")\n            my_string.pascal\n            ```\n            CastThisStringToPascal\n\n\n    !!! Tip \"Use parentheses if you prefer!\"\n\n        ```python\n        my_string = Str(\"HelloWorld\")\n        my_string.to_snake()\n\n        ```\n        hello_world\n\n    \"\"\"\n\n    def __new__(cls, *args, **kwargs):\n        if not all(isinstance(arg, str) for arg in args):\n            raise TypeError(\"Str argument must be a string\")\n        return super().__new__(cls, *args, **kwargs)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n\n        def __new__(cls, *args, **kwargs):\n            return super().__new__(cls, *args, **kwargs)\n\n    @property\n    def pascal(self):\n\"\"\"\n        pascal is an alias for [`to_pascal`][strplus.Str.to_pascal]\n        \"\"\"\n        return self.to_pascal()\n\n    @property\n    def camel(self):\n\"\"\"\n        camel is an alias for [`to_camel`][strplus.Str.to_camel]\n        \"\"\"\n        return self.to_camel()\n\n    @property\n    def snake(self):\n\"\"\"\n        snake is an alias for [`to_snake`][strplus.Str.to_snake]\n        \"\"\"\n        return self.to_snake()\n\n    @property\n    def list(self):\n\"\"\"\n        list is an alias for [`to_list`][strplus.Str.to_list]\n        \"\"\"\n        return self.to_list()\n\n    @property\n    def split_by_sep(self):\n\"\"\"\n        split_by_sep is an alias for [`split_by_separator`][strplus.Str.split_by_separator]\n        \"\"\"\n        return self.to_list()\n\n    @property\n    def sep_to_comma(self):\n\"\"\"\n        sep_to_comma is an alias for [`cast_sep_to_comma`][strplus.Str.cast_sep_to_comma]\n        \"\"\"\n        return self.cast_sep_to_comma()\n\n    @property\n    def print(self):\n\"\"\"\n        print is an alias for `str.print`\n        \"\"\"\n        print(self)\n\n    def to_pascal(self):\n\"\"\"\n\n        Simple method to converts a string to PascalCase.\n        Implementation of [strplus.cases.to_pascal][]\n\n        Returns:\n            str: The PascalCase version of the input string.\n\n        !!! Example\n\n            ```python\n            my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n            my_string.to_pascal()\n            ```\n            SomeMixedStringWithSpacesUnderscoresAndHyphens\n\n        \"\"\"\n        return Str(to_pascal(self))\n\n    def to_camel(self):\n\"\"\"\n\n        Converts a string from any case to CamelCase.\n        Implementation of [strplus.cases.to_camel][]\n\n        Returns:\n            str: The converted string in CamelCase.\n\n        !!! Example\n\n            === \"Example 01\"\n                ```\n                my_string = Str('this_is-an_example')\n                my_string.to_camel()\n                ```\n                thisIsAnExample\n\n            === \"Example 02\"\n                ```\n                my_string = Str('This is a test!')\n                my_string.to_camel()\n                ```\n                thisIsATest\n\n        \"\"\"\n        return Str(to_camel(self))\n\n    def to_snake(self):\n\"\"\"\n\n        Converts a string to snake_case.\n        Implementation of [strplus.cases.to_snake][]\n\n        Returns:\n            str: The string converted to snake_case.\n\n        !!! Example \"Examples\"\n\n            === \"Example 01\"\n                ```\n                my_string = Str(\"HelloWorld\")\n                my_string.snake(\"HelloWorld\")\n                ```\n                hello_world\n\n            === \"Example 02\"\n                ```\n                my_string = Str(\"  AnotherString!  \")\n                my_string.to_snake()\n                ```\n                another_string\n\n            === \"Example 03\"\n                ```\n                my_string = Str(\"hello-world\")\n                my_string.to_snake()\n                ```\n                hello_world\n\n        \"\"\"\n        return Str(to_snake(self))\n\n    def to_list(self):\n\"\"\"\n\n        Converts a string to a list of strings, where each word is a separate element in the list.\n        Implementation of [strplus.functions.to_list][]\n\n        Returns:\n            List[str]: A list of strings, where each word in the input string is a separate element in the list.\n\n        !!! Example \"Converting a string to a list\"\n            This example shows how to use `to_list()` to convert a string to a list.\n\n            === \"Example 1\"\n                ```python\n                my_string = Str('hello world')\n                my_string.to_list\n                ```\n                ['hello', 'world']\n\n\n            === \"Example 2\"\n                ```python\n                my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n                my_string.to_list\n                ```\n                ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']\n\n            === \"Example 2\"\n                ```python\n                my_string = Str('123abc')\n                my_string.to_list\n                ```\n                ['123abc']\n\n        Tip: Use tips\n            - If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.\n            - If you need to remove duplicates from the list, you can convert it to a set and then back to a list.\n\n        Info: Important\n            - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n            - This function uses regular expressions to identify words in the input string.\n\n        \"\"\"\n        return [Str(word) for word in to_list(self)]\n\n    def split_by_separator(self, separator: Optional[Union[List[str], str]] = None):\n\"\"\"\n\n        Splits a string into a list of strings using the specified separator(s), base in the built-in common separators.\n        Implementation of [strplus.functions.split_by_separator][]\n\n        Args:\n            input_string (str): The input string to split.\n            separator (Optional[Union[List[str], str]], optional): The separator(s) to use when splitting the input string.\n                This can be a single string, a list of strings, or None. If None, the function will attempt to determine\n                the appropriate separator based on the input string. Defaults to None.\n\n        Returns:\n            List[str]: A list of strings resulting from splitting the input string using the specified separator(s).\n\n        !!! Example \"This example shows how to use `split_by_separator()` to split a string using a single separator\"\n\n            === \"Example 1\"\n                ```python\n                my_string = Str(\"one,two,three\")\n                my_string.split_by_separator(\",\")\n                ```\n                Returns:\n                ```\n                [\"one\", \"two\", \"three\"]\n                ```\n\n            === \"Example 2\"\n                ```python\n                my_string = Str(\"one-two three|four\")\n                my_string.split_by_separator([\"-\", \" \", \"|\"])\n                ```\n                Returns:\n                ```\n                ['one', 'two three|four']\n                ```\n                !!! Warning\n                    Only one separator frequency found in the list provided, so the priority will be respect!\n\n            === \"Example 3\"\n                ```python\n                my_string = Str(\"one two three four\")\n                my_string.split_by_separator()\n                ```\n                Returns:\n                ```\n                [\"one\", \"two\", \"three\", \"four\"]\n                ```\n\n        Tips:\n            - If the input string contains multiple consecutive instances of the specified separator(s), the resulting\n            list may contain empty strings. To remove empty strings from the resulting list, you can use a list\n            comprehension to filter out any empty strings.\n            - See the `get_separator` for mor details about how the function will attempt to determine the appropriate separator.\n\n        Info: Important\n            - If the separator is a list of strings, the function will attempt to determine the appropriate separator\n            to use based on the input string. If no appropriate separator is found, the function will return the\n            original input string as a single-element list.\n        \"\"\"\n        return [Str(word) for word in split_by_separator(self, separator=separator)]\n\n    def cast_sep_to_comma(self, separator: Optional[str] = None):\n\"\"\"\n\n        Replaces a specified separator or the automatically detected one with a comma in the input string.\n        Implementation of [strplus.functions.cast_sep_to_comma][]\n\n        Args:\n            input_string (str): The input string to replace separators in.\n            separator (Optional[str], optional): The separator to replace with a comma. If None, the function will\n                attempt to determine the appropriate separator based on the input string. Defaults to None.\n\n        Returns:\n            str: A string resulting from replacing the specified or detected separator with a comma.\n\n        !!! Example \"This example shows how to use `cast_sep_to_comma()` to replace a separator in a string\"\n\n            === \"Example 1\"\n                ```python\n                my_string = Str(\"one-two-three\", \"-\")\n                my_string.cast_sep_to_comma(\"-\")\n                ```\n                Returns:\n                ```\n                \"one,two,three\"\n                ```\n\n            === \"Example 2\"\n                ```python\n                my_string = Str(\"one two three\")\n                my_string.cast_sep_to_comma()\n                ```\n                Returns:\n                ```\n                \"one,two,three\"\n                ```\n                !!! Warning\n                    The function will only attempt to detect the separator when the `separator` argument is None.\n\n        Tips:\n            - If the input string does not contain the specified or detected separator, the function will return the\n            original input string unchanged.\n            - See the `get_separator` function for more details about how the function will attempt to detect the separator.\n        \"\"\"\n        return Str(cast_sep_to_comma(self, separator=separator))\n</code></pre>"},{"location":"#strplus.strplus.Str.camel","title":"<code>camel</code>  <code>property</code>","text":"<p>camel is an alias for <code>to_camel</code></p>"},{"location":"#strplus.strplus.Str.list","title":"<code>list</code>  <code>property</code>","text":"<p>list is an alias for <code>to_list</code></p>"},{"location":"#strplus.strplus.Str.pascal","title":"<code>pascal</code>  <code>property</code>","text":"<p>pascal is an alias for <code>to_pascal</code></p>"},{"location":"#strplus.strplus.Str.print","title":"<code>print</code>  <code>property</code>","text":"<p>print is an alias for <code>str.print</code></p>"},{"location":"#strplus.strplus.Str.sep_to_comma","title":"<code>sep_to_comma</code>  <code>property</code>","text":"<p>sep_to_comma is an alias for <code>cast_sep_to_comma</code></p>"},{"location":"#strplus.strplus.Str.snake","title":"<code>snake</code>  <code>property</code>","text":"<p>snake is an alias for <code>to_snake</code></p>"},{"location":"#strplus.strplus.Str.split_by_sep","title":"<code>split_by_sep</code>  <code>property</code>","text":"<p>split_by_sep is an alias for <code>split_by_separator</code></p>"},{"location":"#strplus.strplus.Str.cast_sep_to_comma","title":"<code>cast_sep_to_comma(separator=None)</code>","text":"<p>Replaces a specified separator or the automatically detected one with a comma in the input string. Implementation of strplus.functions.cast_sep_to_comma</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The input string to replace separators in.</p> required <code>separator</code> <code>Optional[str]</code> <p>The separator to replace with a comma. If None, the function will attempt to determine the appropriate separator based on the input string. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>A string resulting from replacing the specified or detected separator with a comma.</p> <p>This example shows how to use <code>cast_sep_to_comma()</code> to replace a separator in a string</p> Example 1Example 2 <p><pre><code>my_string = Str(\"one-two-three\", \"-\")\nmy_string.cast_sep_to_comma(\"-\")\n</code></pre> Returns: <pre><code>\"one,two,three\"\n</code></pre></p> <p><pre><code>my_string = Str(\"one two three\")\nmy_string.cast_sep_to_comma()\n</code></pre> Returns: <pre><code>\"one,two,three\"\n</code></pre></p> <p>Warning</p> <p>The function will only attempt to detect the separator when the <code>separator</code> argument is None.</p> Tips <ul> <li>If the input string does not contain the specified or detected separator, the function will return the original input string unchanged.</li> <li>See the <code>get_separator</code> function for more details about how the function will attempt to detect the separator.</li> </ul> Source code in <code>strplus/strplus.py</code> <pre><code>def cast_sep_to_comma(self, separator: Optional[str] = None):\n\"\"\"\n\n    Replaces a specified separator or the automatically detected one with a comma in the input string.\n    Implementation of [strplus.functions.cast_sep_to_comma][]\n\n    Args:\n        input_string (str): The input string to replace separators in.\n        separator (Optional[str], optional): The separator to replace with a comma. If None, the function will\n            attempt to determine the appropriate separator based on the input string. Defaults to None.\n\n    Returns:\n        str: A string resulting from replacing the specified or detected separator with a comma.\n\n    !!! Example \"This example shows how to use `cast_sep_to_comma()` to replace a separator in a string\"\n\n        === \"Example 1\"\n            ```python\n            my_string = Str(\"one-two-three\", \"-\")\n            my_string.cast_sep_to_comma(\"-\")\n            ```\n            Returns:\n            ```\n            \"one,two,three\"\n            ```\n\n        === \"Example 2\"\n            ```python\n            my_string = Str(\"one two three\")\n            my_string.cast_sep_to_comma()\n            ```\n            Returns:\n            ```\n            \"one,two,three\"\n            ```\n            !!! Warning\n                The function will only attempt to detect the separator when the `separator` argument is None.\n\n    Tips:\n        - If the input string does not contain the specified or detected separator, the function will return the\n        original input string unchanged.\n        - See the `get_separator` function for more details about how the function will attempt to detect the separator.\n    \"\"\"\n    return Str(cast_sep_to_comma(self, separator=separator))\n</code></pre>"},{"location":"#strplus.strplus.Str.split_by_separator","title":"<code>split_by_separator(separator=None)</code>","text":"<p>Splits a string into a list of strings using the specified separator(s), base in the built-in common separators. Implementation of strplus.functions.split_by_separator</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The input string to split.</p> required <code>separator</code> <code>Optional[Union[List[str], str]]</code> <p>The separator(s) to use when splitting the input string. This can be a single string, a list of strings, or None. If None, the function will attempt to determine the appropriate separator based on the input string. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>List[str]: A list of strings resulting from splitting the input string using the specified separator(s).</p> <p>This example shows how to use <code>split_by_separator()</code> to split a string using a single separator</p> Example 1Example 2Example 3 <p><pre><code>my_string = Str(\"one,two,three\")\nmy_string.split_by_separator(\",\")\n</code></pre> Returns: <pre><code>[\"one\", \"two\", \"three\"]\n</code></pre></p> <p><pre><code>my_string = Str(\"one-two three|four\")\nmy_string.split_by_separator([\"-\", \" \", \"|\"])\n</code></pre> Returns: <pre><code>['one', 'two three|four']\n</code></pre></p> <p>Warning</p> <p>Only one separator frequency found in the list provided, so the priority will be respect!</p> <p><pre><code>my_string = Str(\"one two three four\")\nmy_string.split_by_separator()\n</code></pre> Returns: <pre><code>[\"one\", \"two\", \"three\", \"four\"]\n</code></pre></p> Tips <ul> <li>If the input string contains multiple consecutive instances of the specified separator(s), the resulting list may contain empty strings. To remove empty strings from the resulting list, you can use a list comprehension to filter out any empty strings.</li> <li>See the <code>get_separator</code> for mor details about how the function will attempt to determine the appropriate separator.</li> </ul> Important <ul> <li>If the separator is a list of strings, the function will attempt to determine the appropriate separator to use based on the input string. If no appropriate separator is found, the function will return the original input string as a single-element list.</li> </ul> Source code in <code>strplus/strplus.py</code> <pre><code>def split_by_separator(self, separator: Optional[Union[List[str], str]] = None):\n\"\"\"\n\n    Splits a string into a list of strings using the specified separator(s), base in the built-in common separators.\n    Implementation of [strplus.functions.split_by_separator][]\n\n    Args:\n        input_string (str): The input string to split.\n        separator (Optional[Union[List[str], str]], optional): The separator(s) to use when splitting the input string.\n            This can be a single string, a list of strings, or None. If None, the function will attempt to determine\n            the appropriate separator based on the input string. Defaults to None.\n\n    Returns:\n        List[str]: A list of strings resulting from splitting the input string using the specified separator(s).\n\n    !!! Example \"This example shows how to use `split_by_separator()` to split a string using a single separator\"\n\n        === \"Example 1\"\n            ```python\n            my_string = Str(\"one,two,three\")\n            my_string.split_by_separator(\",\")\n            ```\n            Returns:\n            ```\n            [\"one\", \"two\", \"three\"]\n            ```\n\n        === \"Example 2\"\n            ```python\n            my_string = Str(\"one-two three|four\")\n            my_string.split_by_separator([\"-\", \" \", \"|\"])\n            ```\n            Returns:\n            ```\n            ['one', 'two three|four']\n            ```\n            !!! Warning\n                Only one separator frequency found in the list provided, so the priority will be respect!\n\n        === \"Example 3\"\n            ```python\n            my_string = Str(\"one two three four\")\n            my_string.split_by_separator()\n            ```\n            Returns:\n            ```\n            [\"one\", \"two\", \"three\", \"four\"]\n            ```\n\n    Tips:\n        - If the input string contains multiple consecutive instances of the specified separator(s), the resulting\n        list may contain empty strings. To remove empty strings from the resulting list, you can use a list\n        comprehension to filter out any empty strings.\n        - See the `get_separator` for mor details about how the function will attempt to determine the appropriate separator.\n\n    Info: Important\n        - If the separator is a list of strings, the function will attempt to determine the appropriate separator\n        to use based on the input string. If no appropriate separator is found, the function will return the\n        original input string as a single-element list.\n    \"\"\"\n    return [Str(word) for word in split_by_separator(self, separator=separator)]\n</code></pre>"},{"location":"#strplus.strplus.Str.to_camel","title":"<code>to_camel()</code>","text":"<p>Converts a string from any case to CamelCase. Implementation of strplus.cases.to_camel</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The converted string in CamelCase.</p> <p>Example</p> Example 01Example 02 <p><pre><code>my_string = Str('this_is-an_example')\nmy_string.to_camel()\n</code></pre> thisIsAnExample</p> <p><pre><code>my_string = Str('This is a test!')\nmy_string.to_camel()\n</code></pre> thisIsATest</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_camel(self):\n\"\"\"\n\n    Converts a string from any case to CamelCase.\n    Implementation of [strplus.cases.to_camel][]\n\n    Returns:\n        str: The converted string in CamelCase.\n\n    !!! Example\n\n        === \"Example 01\"\n            ```\n            my_string = Str('this_is-an_example')\n            my_string.to_camel()\n            ```\n            thisIsAnExample\n\n        === \"Example 02\"\n            ```\n            my_string = Str('This is a test!')\n            my_string.to_camel()\n            ```\n            thisIsATest\n\n    \"\"\"\n    return Str(to_camel(self))\n</code></pre>"},{"location":"#strplus.strplus.Str.to_list","title":"<code>to_list()</code>","text":"<p>Converts a string to a list of strings, where each word is a separate element in the list. Implementation of strplus.functions.to_list</p> <p>Returns:</p> Type Description <p>List[str]: A list of strings, where each word in the input string is a separate element in the list.</p> <p>Converting a string to a list</p> <p>This example shows how to use <code>to_list()</code> to convert a string to a list.</p> Example 1Example 2Example 2 <p><pre><code>my_string = Str('hello world')\nmy_string.to_list\n</code></pre> ['hello', 'world']</p> <p><pre><code>my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\nmy_string.to_list\n</code></pre> ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']</p> <p><pre><code>my_string = Str('123abc')\nmy_string.to_list\n</code></pre> ['123abc']</p> Use tips <ul> <li>If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.</li> <li>If you need to remove duplicates from the list, you can convert it to a set and then back to a list.</li> </ul> Important <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> Source code in <code>strplus/strplus.py</code> <pre><code>def to_list(self):\n\"\"\"\n\n    Converts a string to a list of strings, where each word is a separate element in the list.\n    Implementation of [strplus.functions.to_list][]\n\n    Returns:\n        List[str]: A list of strings, where each word in the input string is a separate element in the list.\n\n    !!! Example \"Converting a string to a list\"\n        This example shows how to use `to_list()` to convert a string to a list.\n\n        === \"Example 1\"\n            ```python\n            my_string = Str('hello world')\n            my_string.to_list\n            ```\n            ['hello', 'world']\n\n\n        === \"Example 2\"\n            ```python\n            my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n            my_string.to_list\n            ```\n            ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']\n\n        === \"Example 2\"\n            ```python\n            my_string = Str('123abc')\n            my_string.to_list\n            ```\n            ['123abc']\n\n    Tip: Use tips\n        - If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.\n        - If you need to remove duplicates from the list, you can convert it to a set and then back to a list.\n\n    Info: Important\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function uses regular expressions to identify words in the input string.\n\n    \"\"\"\n    return [Str(word) for word in to_list(self)]\n</code></pre>"},{"location":"#strplus.strplus.Str.to_pascal","title":"<code>to_pascal()</code>","text":"<p>Simple method to converts a string to PascalCase. Implementation of strplus.cases.to_pascal</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The PascalCase version of the input string.</p> <p>Example</p> <p><pre><code>my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\nmy_string.to_pascal()\n</code></pre> SomeMixedStringWithSpacesUnderscoresAndHyphens</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_pascal(self):\n\"\"\"\n\n    Simple method to converts a string to PascalCase.\n    Implementation of [strplus.cases.to_pascal][]\n\n    Returns:\n        str: The PascalCase version of the input string.\n\n    !!! Example\n\n        ```python\n        my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n        my_string.to_pascal()\n        ```\n        SomeMixedStringWithSpacesUnderscoresAndHyphens\n\n    \"\"\"\n    return Str(to_pascal(self))\n</code></pre>"},{"location":"#strplus.strplus.Str.to_snake","title":"<code>to_snake()</code>","text":"<p>Converts a string to snake_case. Implementation of strplus.cases.to_snake</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The string converted to snake_case.</p> <p>Examples</p> Example 01Example 02Example 03 <p><pre><code>my_string = Str(\"HelloWorld\")\nmy_string.snake(\"HelloWorld\")\n</code></pre> hello_world</p> <p><pre><code>my_string = Str(\"  AnotherString!  \")\nmy_string.to_snake()\n</code></pre> another_string</p> <p><pre><code>my_string = Str(\"hello-world\")\nmy_string.to_snake()\n</code></pre> hello_world</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_snake(self):\n\"\"\"\n\n    Converts a string to snake_case.\n    Implementation of [strplus.cases.to_snake][]\n\n    Returns:\n        str: The string converted to snake_case.\n\n    !!! Example \"Examples\"\n\n        === \"Example 01\"\n            ```\n            my_string = Str(\"HelloWorld\")\n            my_string.snake(\"HelloWorld\")\n            ```\n            hello_world\n\n        === \"Example 02\"\n            ```\n            my_string = Str(\"  AnotherString!  \")\n            my_string.to_snake()\n            ```\n            another_string\n\n        === \"Example 03\"\n            ```\n            my_string = Str(\"hello-world\")\n            my_string.to_snake()\n            ```\n            hello_world\n\n    \"\"\"\n    return Str(to_snake(self))\n</code></pre>"},{"location":"examples/cases_01/","title":"Cases examples! \ud83d\ude80","text":"In\u00a0[2]: Copied! <pre>pip install strplus\n</pre> pip install strplus <pre>Collecting strplus\n  Using cached strplus-1.0.8-py3-none-any.whl (7.3 kB)\nInstalling collected packages: strplus\nSuccessfully installed strplus-1.0.8\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[3]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[4]: Copied! <pre>my_string = Str(\"Cast_this_string_TO_Pascal!\")\n\nmy_string.pascal\n</pre> my_string = Str(\"Cast_this_string_TO_Pascal!\")  my_string.pascal Out[4]: <pre>'CastThisStringToPascal'</pre> In\u00a0[5]: Copied! <pre>my_string = Str(\"cast_this_string_to_camel\")\n\nmy_string.camel\n</pre> my_string = Str(\"cast_this_string_to_camel\")  my_string.camel Out[5]: <pre>'castThisStringToCamel'</pre> In\u00a0[6]: Copied! <pre>my_string = Str(\"Cast_this_StringToSnake\")\n\nmy_string.snake\n</pre> my_string = Str(\"Cast_this_StringToSnake\")  my_string.snake Out[6]: <pre>'cast_this_string_to_snake'</pre> In\u00a0[7]: Copied! <pre>Str(\"CastMeUseLikeANormalFunction\").to_snake()\n</pre> Str(\"CastMeUseLikeANormalFunction\").to_snake() Out[7]: <pre>'cast_me_use_like_a_normal_function'</pre> In\u00a0[8]: Copied! <pre>Str(\"CastThisPath/2021/01/01\").to_snake()\n</pre> Str(\"CastThisPath/2021/01/01\").to_snake() Out[8]: <pre>'cast_this_path_2021_01_01'</pre> In\u00a0[9]: Copied! <pre>Str(\"cast_this_path_to_pascal/2021/01/01\").to_pascal()\n</pre> Str(\"cast_this_path_to_pascal/2021/01/01\").to_pascal() Out[9]: <pre>'CastThisPathToPascal20210101'</pre> In\u00a0[10]: Copied! <pre>Str(\"cat me to_Pascal Please\").to_pascal()\n</pre> Str(\"cat me to_Pascal Please\").to_pascal() Out[10]: <pre>'CatMeToPascalPlease'</pre> In\u00a0[11]: Copied! <pre>my_string.to_camel()\n</pre> my_string.to_camel() Out[11]: <pre>'castThisStringToSnake'</pre> In\u00a0[12]: Copied! <pre>Str(\"reference dataset\").to_camel()\n</pre> Str(\"reference dataset\").to_camel() Out[12]: <pre>'referenceDataset'</pre> In\u00a0[13]: Copied! <pre># Complex return, recursive Str\nStr(\"MyStringWorks\").to_snake().split(\"_\")[0].pascal\n</pre> # Complex return, recursive Str Str(\"MyStringWorks\").to_snake().split(\"_\")[0].pascal Out[13]: <pre>'My'</pre> Common behavior \ud83d\udc4c <p>    \"_\".join returns a str class not a not or Str with the good features!     In the Str we only have recessivity we are not overwriting the str from the global to Str, so it's normal and expected that behavior   In\u00a0[14]: Copied! <pre>try:\n    \"_\".join(Str(\"MyStringWorks\").to_snake().split(\"_\")[0:1]).pascal\nexcept Exception as e:\n    print(e)\n</pre> try:     \"_\".join(Str(\"MyStringWorks\").to_snake().split(\"_\")[0:1]).pascal except Exception as e:     print(e) <pre>'str' object has no attribute 'pascal'\n</pre> In\u00a0[15]: Copied! <pre># you always has the built-in native Python functions\nmy_string.upper()\n</pre> # you always has the built-in native Python functions my_string.upper() Out[15]: <pre>'CAST_THIS_STRINGTOSNAKE'</pre> In\u00a0[16]: Copied! <pre>from strplus.functions import *\n</pre> from strplus.functions import * In\u00a0[17]: Copied! <pre>to_camel(\"parse_to_camel\")\n</pre> to_camel(\"parse_to_camel\") Out[17]: <pre>'parseToCamel'</pre> In\u00a0[18]: Copied! <pre>to_snake(\"ThisIsAnotherTest\")\n</pre> to_snake(\"ThisIsAnotherTest\") Out[18]: <pre>'this_is_another_test'</pre> In\u00a0[19]: Copied! <pre>### Run project local \ud83d\udcc0\n# import os \n# import sys \n# sys.path.insert(0, os.path.abspath(\"../..\"))\n# sys.path.insert(0, os.path.abspath(\"..\"))\n</pre> ### Run project local \ud83d\udcc0 # import os  # import sys  # sys.path.insert(0, os.path.abspath(\"../..\")) # sys.path.insert(0, os.path.abspath(\"..\"))"},{"location":"examples/cases_01/#cases-examples","title":"Cases examples! \ud83d\ude80\u00b6","text":"<p>\u2728 Extend your string powers with Str+</p>"},{"location":"examples/cases_01/#setup-optional","title":"Setup [Optional]\u00b6","text":"Create a virtualenv \ud83d\udd27  <p>Create a new virtualenv before start this notebook to be able to select it as the kernel, if you want!</p> <ul> <li><p>Create a new virtualenv.</p> <pre><code>pyenv virtualenv 3.9.16 .envStrPlus\npyenv activate .envStrPlus\npip install --upgrade pip\npip install ipykernel\n</code></pre> </li> <li><p>Delete the virtualenv.</p> <pre><code>pyenv deactivate .envStrPlus\npyenv virtualenv-delete -f .envStrPlus\n</code></pre> </li> <li><p>Should return empty</p> <pre><code>pyenv versions | grep .envStrPlus\n</code></pre> </li> </ul>"},{"location":"examples/cases_01/#required","title":"Required! \ud83d\udca2\u00b6","text":""},{"location":"examples/cases_01/#simples-use-no-parentheses","title":"\ud83d\ude0d Simples use no parentheses!\u00b6","text":""},{"location":"examples/cases_01/#you-can-use-with-parentheses-also","title":"\ud83d\udd25 You can use with parentheses also!\u00b6","text":""},{"location":"examples/cases_01/#snake-examples","title":"Snake examples \ud83d\udc0d\u00b6","text":""},{"location":"examples/cases_01/#pascal-examples","title":"Pascal examples \ud83d\udc2b\u00b6","text":""},{"location":"examples/cases_01/#camel","title":"Camel \ud83d\udc2a\u00b6","text":""},{"location":"examples/cases_01/#complex","title":"Complex \ud83d\udc7d\u00b6","text":""},{"location":"examples/cases_01/#just-use-a-specif-function-if-you-prefer","title":"\ud83d\ude0f Just use a specif function if you prefer!\u00b6","text":""},{"location":"examples/functions_01/","title":"Functions Examples!  \ud83d\udc95","text":"In\u00a0[3]: Copied! <pre>pip install strplus\n</pre> pip install strplus In\u00a0[4]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[5]: Copied! <pre>my_new_string = Str(\"Print me please, simple and easy!\")\n\nmy_new_string.print\n</pre> my_new_string = Str(\"Print me please, simple and easy!\")  my_new_string.print <pre>Print me please, simple and easy!\n</pre> In\u00a0[6]: Copied! <pre>for word in my_new_string.list:\n    word.print\n</pre> for word in my_new_string.list:     word.print <pre>Print\nme\nplease\nsimple\nand\neasy\n</pre> In\u00a0[7]: Copied! <pre>from strplus.functions import get_separator\n</pre> from strplus.functions import get_separator In\u00a0[8]: Copied! <pre>mystring =  \"test;separator;correct,one,test|new\"\n\nget_separator(mystring)\n</pre> mystring =  \"test;separator;correct,one,test|new\"  get_separator(mystring)  Out[8]: <pre>','</pre> In\u00a0[9]: Copied! <pre>mystring =  \"test;separator;correct\\none,test|new\"\n\nget_separator(mystring)\n</pre> mystring =  \"test;separator;correct\\none,test|new\"  get_separator(mystring) Out[9]: <pre>';'</pre> In\u00a0[10]: Copied! <pre>mystring =  \"\\ntest;\\nseparator;correct\\none,test|new\"\n\nget_separator(mystring)\n</pre> mystring =  \"\\ntest;\\nseparator;correct\\none,test|new\"  get_separator(mystring) Out[10]: <pre>'\\n'</pre> In\u00a0[11]: Copied! <pre>mystring =  \"col1;col2,col3\"\n\nget_separator(mystring)\n</pre> mystring =  \"col1;col2,col3\"  get_separator(mystring) Out[11]: <pre>','</pre> In\u00a0[12]: Copied! <pre>mystring =  \"col1;col2,col3;col4\"\n\nget_separator(mystring)\n</pre> mystring =  \"col1;col2,col3;col4\"  get_separator(mystring) Out[12]: <pre>';'</pre> In\u00a0[18]: Copied! <pre>input_string = \"apple;banana,cherry\"\nresult = get_separator(input_string)\nprint(result)\nresult == \",\"\n</pre> input_string = \"apple;banana,cherry\" result = get_separator(input_string) print(result) result == \",\" <pre>,\n</pre> Out[18]: <pre>True</pre> In\u00a0[20]: Copied! <pre>input_string = \"apple;banana,cherry\"\nresult = get_separator(input_string, separator_list=[\";\",\",\"])\nprint(result)\nresult == \";\"\n</pre> input_string = \"apple;banana,cherry\" result = get_separator(input_string, separator_list=[\";\",\",\"]) print(result) result == \";\" <pre>;\n</pre> Out[20]: <pre>True</pre> In\u00a0[7]: Copied! <pre>from strplus.functions import split_by_separator\n</pre> from strplus.functions import split_by_separator In\u00a0[8]: Copied! <pre>split_by_separator(\"one,two,three\")\n</pre> split_by_separator(\"one,two,three\") Out[8]: <pre>['one', 'two', 'three']</pre> In\u00a0[9]: Copied! <pre>split_by_separator(\"one;two;three\")\n</pre> split_by_separator(\"one;two;three\") Out[9]: <pre>['one', 'two', 'three']</pre> In\u00a0[11]: Copied! <pre>split_by_separator(\"                           one\\ttwo\\tthree                      \")\n</pre> split_by_separator(\"                           one\\ttwo\\tthree                      \") Out[11]: <pre>['one', 'two', 'three']</pre> <p>The most frequent separator is \",\"</p> In\u00a0[13]: Copied! <pre>split_by_separator(\"                           one\\ttwo\\tthree,for,five,six,seven                      \")\n</pre> split_by_separator(\"                           one\\ttwo\\tthree,for,five,six,seven                      \") Out[13]: <pre>['one\\ttwo\\tthree', 'for', 'five', 'six', 'seven']</pre> In\u00a0[10]: Copied! <pre>split_by_separator(\"one|two|three\")\n</pre> split_by_separator(\"one|two|three\") Out[10]: <pre>['one', 'two', 'three']</pre> In\u00a0[6]: Copied! <pre># only one separator frequency, so the priority will be respect\nsplit_by_separator(\"one-two three|four\", [\"-\", \" \", \"|\"])\n</pre> # only one separator frequency, so the priority will be respect split_by_separator(\"one-two three|four\", [\"-\", \" \", \"|\"]) Out[6]: <pre>['one', 'two three|four']</pre> In\u00a0[4]: Copied! <pre>split_by_separator(\"one two three four\")\n</pre> split_by_separator(\"one two three four\") Out[4]: <pre>['one', 'two', 'three', 'four']</pre> In\u00a0[2]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[8]: Copied! <pre>my_string = Str(\"one,two,three\")\nmy_string.split_by_separator(\",\")\n</pre> my_string = Str(\"one,two,three\") my_string.split_by_separator(\",\") Out[8]: <pre>['one', 'two', 'three']</pre> In\u00a0[5]: Copied! <pre># only one separator frequency, so the priority will be respect\nmy_string = Str(\"one-two three|four\")\nmy_string.split_by_separator([\"-\", \" \", \"|\"])\n</pre> # only one separator frequency, so the priority will be respect my_string = Str(\"one-two three|four\") my_string.split_by_separator([\"-\", \" \", \"|\"]) Out[5]: <pre>['one', 'two three|four']</pre> In\u00a0[6]: Copied! <pre>my_string = Str(\"one two three four\")\nmy_string.split_by_separator()\n</pre> my_string = Str(\"one two three four\") my_string.split_by_separator() Out[6]: <pre>['one', 'two', 'three', 'four']</pre> In\u00a0[1]: Copied! <pre>### Run project local \ud83d\udcc0\n# import os \n# import sys \n# sys.path.insert(0, os.path.abspath(\"../..\"))\n# sys.path.insert(0, os.path.abspath(\"..\"))\n</pre> ### Run project local \ud83d\udcc0 # import os  # import sys  # sys.path.insert(0, os.path.abspath(\"../..\")) # sys.path.insert(0, os.path.abspath(\"..\"))"},{"location":"examples/functions_01/#functions-examples","title":"Functions Examples!  \ud83d\udc95\u00b6","text":"<p>\ud83d\ude80 Extend your string powers with Str+</p>"},{"location":"examples/functions_01/#setup-optional","title":"Setup [Optional]\u00b6","text":"Create a virtualenv \ud83d\udd27  Create a new virtualenv before start this notebook to be able to select it as the kernel, if you want! <ul> <li>Create a new virtualenv.</li> </ul> <pre><code>  pyenv virtualenv 3.9.16 .envStrPlus\n  pyenv activate .envStrPlus\n  pip install --upgrade pip\n  pip install ipykernel\n</code></pre> <ul> <li><p>Delete the virtualenv.</p> <pre><code>pyenv deactivate .envStrPlus\npyenv virtualenv-delete -f .envStrPlus\n</code></pre> </li> <li><p>Should return empty</p> <pre><code>pyenv versions | grep .envStrPlus\n</code></pre> </li> </ul>"},{"location":"examples/functions_01/#required","title":"Required! \ud83d\udca2\u00b6","text":""},{"location":"examples/functions_01/#print-inside","title":"\ud83d\udcdc Print inside!\u00b6","text":""},{"location":"examples/functions_01/#get-most-frequent-separator","title":"\ud83d\udd02 Get most frequent separator\u00b6","text":""},{"location":"examples/functions_01/#split-by-separator","title":"\u2702\ufe0f Split by Separator\u00b6","text":""},{"location":"examples/functions_01/#str-class-split-by-separator","title":"Str class - Split by separator\u00b6","text":""},{"location":"examples/str_class/","title":"Str class usage!  \ud83c\udfc6","text":"In\u00a0[5]: Copied! <pre>pip install strplus\n</pre> pip install strplus <pre>Requirement already satisfied: strplus in /home/silvio/.pyenv/versions/3.9.16/envs/.envStrPlus/lib/python3.9/site-packages (1.0.6)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[6]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[7]: Copied! <pre>my_new_string = Str(\"Print me please, simple and easy!\")\n\nmy_new_string.print\n</pre> my_new_string = Str(\"Print me please, simple and easy!\")  my_new_string.print <pre>Print me please, simple and easy!\n</pre> In\u00a0[8]: Copied! <pre>for word in my_new_string.list:\n    word.print\n</pre> for word in my_new_string.list:     word.print <pre>Print\nme\nplease\nsimple\nand\neasy\n</pre> In\u00a0[9]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[19]: Copied! <pre>my_string = Str(\"one;two;three;four\")\nmy_string.split_by_sep\n</pre> my_string = Str(\"one;two;three;four\") my_string.split_by_sep Out[19]: <pre>['one', 'two', 'three', 'four']</pre> In\u00a0[20]: Copied! <pre>my_string = Str(\"one,two,three,four\")\nmy_string.split_by_sep\n</pre> my_string = Str(\"one,two,three,four\") my_string.split_by_sep Out[20]: <pre>['one', 'two', 'three', 'four']</pre> In\u00a0[21]: Copied! <pre>my_string = Str(\"one|two|three|four\")\nmy_string.split_by_sep\n</pre> my_string = Str(\"one|two|three|four\") my_string.split_by_sep Out[21]: <pre>['one', 'two', 'three', 'four']</pre> In\u00a0[10]: Copied! <pre>my_string = Str(\"one;two;three;four\")\nmy_string.split_by_separator()\n</pre> my_string = Str(\"one;two;three;four\") my_string.split_by_separator() Out[10]: <pre>['one', 'two', 'three', 'four']</pre> In\u00a0[11]: Copied! <pre>my_string = Str(\"one two three four\")\nmy_string.split_by_separator()\n</pre> my_string = Str(\"one two three four\") my_string.split_by_separator() Out[11]: <pre>['one', 'two', 'three', 'four']</pre> In\u00a0[12]: Copied! <pre>my_string = Str(\"one,two,three\")\nmy_string.split_by_separator(\",\")\n</pre> my_string = Str(\"one,two,three\") my_string.split_by_separator(\",\") Out[12]: <pre>['one', 'two', 'three']</pre> <p>\u26a0\ufe0f Only one separator frequency, so the priority will be respect</p> In\u00a0[13]: Copied! <pre>my_string = Str(\"one-two three|four\")\nmy_string.split_by_separator([\"-\", \" \", \"|\"])\n</pre> my_string = Str(\"one-two three|four\") my_string.split_by_separator([\"-\", \" \", \"|\"]) Out[13]: <pre>['one', 'two three|four']</pre> In\u00a0[14]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[15]: Copied! <pre>my_string = Str(\"Cast_this_string_TO_Pascal!\")\n\nmy_string.pascal\n</pre> my_string = Str(\"Cast_this_string_TO_Pascal!\")  my_string.pascal Out[15]: <pre>'CastThisStringToPascal'</pre> In\u00a0[16]: Copied! <pre>my_string = Str(\"cast_this_string_to_camel\")\n\nmy_string.camel\n</pre> my_string = Str(\"cast_this_string_to_camel\")  my_string.camel Out[16]: <pre>'castThisStringToCamel'</pre> In\u00a0[17]: Copied! <pre>my_string = Str(\"Cast_this_StringToSnake\")\n\nmy_string.snake\n</pre> my_string = Str(\"Cast_this_StringToSnake\")  my_string.snake Out[17]: <pre>'cast_this_string_to_snake'</pre> In\u00a0[3]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[4]: Copied! <pre>my_string = Str(\"test;one;\")\n\nmy_string.sep_to_comma\n</pre> my_string = Str(\"test;one;\")  my_string.sep_to_comma Out[4]: <pre>'test,one,'</pre> In\u00a0[5]: Copied! <pre>my_string = Str(\"|test|one|\")\n\nmy_string.sep_to_comma\n</pre> my_string = Str(\"|test|one|\")  my_string.sep_to_comma Out[5]: <pre>',test,one,'</pre> In\u00a0[6]: Copied! <pre>my_string = Str(\"test:one\")\n\nmy_string.sep_to_comma\n</pre> my_string = Str(\"test:one\")  my_string.sep_to_comma Out[6]: <pre>'test,one'</pre> In\u00a0[1]: Copied! <pre>### Run project local \ud83d\udcc0\n# import os \n# import sys \n# sys.path.insert(0, os.path.abspath(\"../..\"))\n# sys.path.insert(0, os.path.abspath(\"..\"))\n</pre> ### Run project local \ud83d\udcc0 # import os  # import sys  # sys.path.insert(0, os.path.abspath(\"../..\")) # sys.path.insert(0, os.path.abspath(\"..\"))"},{"location":"examples/str_class/#str-class-usage","title":"Str class usage!  \ud83c\udfc6\u00b6","text":"<p>\ud83d\ude80 Extend your string powers with Str+</p>"},{"location":"examples/str_class/#setup-optional","title":"Setup [Optional]\u00b6","text":"Create a virtualenv \ud83d\udd27  Create a new virtualenv before start this notebook to be able to select it as the kernel, if you want! <ul> <li>Create a new virtualenv.</li> </ul> <pre><code>  pyenv virtualenv 3.9.16 .envStrPlus\n  pyenv activate .envStrPlus\n  pip install --upgrade pip\n  pip install ipykernel\n</code></pre> <ul> <li><p>Delete the virtualenv.</p> <pre><code>pyenv deactivate .envStrPlus\npyenv virtualenv-delete -f .envStrPlus\n</code></pre> </li> <li><p>Should return empty</p> <pre><code>pyenv versions | grep .envStrPlus\n</code></pre> </li> </ul>"},{"location":"examples/str_class/#required","title":"\ud83d\udca2 Required!\u00b6","text":""},{"location":"examples/str_class/#simples-use-no-parentheses","title":"\ud83d\ude0d Simples use no parentheses!\u00b6","text":""},{"location":"examples/str_class/#print-inside","title":"\ud83d\udcdc Print inside!\u00b6","text":""},{"location":"examples/str_class/#str-class-split-by-separator","title":"\u2702\ufe0f Str class - Split by separator\u00b6","text":""},{"location":"examples/str_class/#no-parentheses","title":"No parentheses\u00b6","text":""},{"location":"examples/str_class/#with-parentheses","title":"With parentheses\u00b6","text":""},{"location":"examples/str_class/#string-cases","title":"\ud83d\udcce String Cases\u00b6","text":""},{"location":"examples/str_class/#cast-separator-to-comma","title":"\ud83d\udcd0 Cast separator to comma.\u00b6","text":"<p>[most frequent separator or the given one!]</p>"},{"location":"strplus/SUMMARY/","title":"package","text":"<ul> <li>cases</li> <li>functions</li> <li>strplus</li> </ul>"},{"location":"strplus/cases/","title":"Cases","text":""},{"location":"strplus/cases/#strplus.cases.to_camel","title":"<code>to_camel(text)</code>","text":"<p>Simple and efficient method to converts a string to camelCase.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input string.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The camelCase version of the input string.</p> <p>Converting strings to camelCase</p> <p>This example shows how to use <code>to_camel()</code> to convert strings to camelCase.</p> Example 1Example 2Example 3Example 4 <p><pre><code>to_camel('hello_world')\n</code></pre> helloWorld</p> <p><pre><code>to_camel('PascalCase')\n</code></pre> pascalCase</p> <p><pre><code>to_camel('some-mixed_string With spaces_underscores-and-hyphens')\n</code></pre> someMixedStringWithSpacesUnderscoresAndHyphens</p> <p><pre><code>to_camel('123abc')\n</code></pre> 123abc</p> Important <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function will preserve any digits in the input string.</li> <li>If the input string already has camelCase formatting, the function will return it unchanged.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> Source code in <code>strplus/cases.py</code> <pre><code>def to_camel(text) -&gt; str:\n\"\"\"\n\n    Simple and efficient method to converts a string to camelCase.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The camelCase version of the input string.\n\n    !!! Example \"Converting strings to camelCase\"\n\n        This example shows how to use `to_camel()` to convert strings to camelCase.\n\n        === \"Example 1\"\n            ```python\n            to_camel('hello_world')\n            ```\n            helloWorld\n\n        === \"Example 2\"\n            ```python\n            to_camel('PascalCase')\n            ```\n            pascalCase\n\n        === \"Example 3\"\n            ```python\n            to_camel('some-mixed_string With spaces_underscores-and-hyphens')\n            ```\n            someMixedStringWithSpacesUnderscoresAndHyphens\n\n        === \"Example 4\"\n            ```python\n            to_camel('123abc')\n            ```\n            123abc\n\n    Info: Important\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function will preserve any digits in the input string.\n        - If the input string already has camelCase formatting, the function will return it unchanged.\n        - This function uses regular expressions to identify words in the input string.\n\n    \"\"\"\n\n    text: str = text.strip()\n\n    if not text:  # If the input string is empty, return an empty string\n        return \"\"\n\n    # Split the string into words using regex, split 1\n    words: str = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\" \\1\", re.sub(\"([A-Z]+)\", r\" \\1\", text)).split()], [])\n\n    # Capitalize the first letter of each word except the first word\n    capitalized_words: str = [words[0].lower()] + [word.capitalize() for word in words[1:]]\n\n    # Join the words back together to form the CamelCase string\n    check_01: str = \"\".join(capitalized_words)\n\n    # Final check\n    words: str = re.split(\"[-_]\", check_01)\n\n    return words[0] + \"\".join(word.capitalize() for word in words[1:]).replace(\"_\", \"\")\n</code></pre>"},{"location":"strplus/cases/#strplus.cases.to_pascal","title":"<code>to_pascal(text)</code>","text":"<p>Simple and efficient method to converts a string to PascalCase.</p> <p>text (str): The input string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The PascalCase version of the input string.</p> <p>Converting strings to PascalCase</p> <p>This examples shows how to use <code>to_pascal()</code> to convert strings to PascalCase.</p> Example 1Example 2Example 3Example 4 <p><pre><code>to_pascal('hello_world')\n</code></pre> HelloWorld</p> <p><pre><code>to_pascal('CamelCase')\n</code></pre> CamelCase</p> <p><pre><code>to_pascal('some-mixed_string With spaces_underscores-and-hyphens')\n</code></pre> SomeMixedStringWithSpacesUnderscoresAndHyphens</p> <p><pre><code>to_pascal('123abc')\n</code></pre> 123abc</p> Important <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function will preserve any digits in the input string.</li> <li>If the input string already has PascalCase formatting, the function will return it unchanged.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> Source code in <code>strplus/cases.py</code> <pre><code>def to_pascal(text: str) -&gt; str:\n\"\"\"\n\n    Simple and efficient method to converts a string to PascalCase.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n        str: The PascalCase version of the input string.\n\n    !!! Example \"Converting strings to PascalCase\"\n        This examples shows how to use `to_pascal()` to convert strings to PascalCase.\n\n        === \"Example 1\"\n            ```python\n            to_pascal('hello_world')\n            ```\n            HelloWorld\n\n        === \"Example 2\"\n            ```python\n            to_pascal('CamelCase')\n            ```\n            CamelCase\n\n        === \"Example 3\"\n            ```python\n            to_pascal('some-mixed_string With spaces_underscores-and-hyphens')\n            ```\n            SomeMixedStringWithSpacesUnderscoresAndHyphens\n\n        === \"Example 4\"\n            ```python\n            to_pascal('123abc')\n            ```\n            123abc\n\n    Info: Important\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function will preserve any digits in the input string.\n        - If the input string already has PascalCase formatting, the function will return it unchanged.\n        - This function uses regular expressions to identify words in the input string.\n\n    \"\"\"\n    text = text.strip()\n\n    if not text:  # If the input string is empty or only whitespace, return an empty string\n        return \"\"\n\n    # Remove any underscores, hyphens, or spaces and split the string into words\n    words = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\" \\1\", re.sub(\"([A-Z]+)\", r\" \\1\", text)).split()], [])\n\n    # Capitalize the first letter of each word except the first word\n    capitalized_words = []\n    for i, word in enumerate(words):\n        if i == 0 and word[0].isdigit():\n            capitalized_words.append(str(word[0]))\n            word = word[1:]\n        capitalized_words.append(word.capitalize())\n\n    # Join the words back together to form the CamelCase string\n    return \"\".join(capitalized_words)\n</code></pre>"},{"location":"strplus/cases/#strplus.cases.to_snake","title":"<code>to_snake(text)</code>","text":"<p>Converts a string to snake_case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input string.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The snake_case version of the input string.</p> <p>Converting strings to snake_case</p> <p>This example shows how to use <code>to_snake()</code> to convert strings to snake_case.</p> Example 1Example 2Example 3 <p><pre><code>to_snake('helloWorld')\n</code></pre> hello_world</p> <p><pre><code>to_snake('Some-Mixed_string With spaces-underscores-and-hyphens')\n</code></pre> some_mixed_string_with_spaces_underscores_and_hyphens</p> <p><pre><code>to_snake('CamelCase')\n</code></pre> camel_case</p> Important <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function will convert any uppercase letters to lowercase, and separate words with underscores.</li> <li>If the input string already has snake_case formatting, the function will return it unchanged.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> Source code in <code>strplus/cases.py</code> <pre><code>def to_snake(text) -&gt; str:\n\"\"\"\n\n    Converts a string to snake_case.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The snake_case version of the input string.\n\n    !!! Example \"Converting strings to snake_case\"\n        This example shows how to use `to_snake()` to convert strings to snake_case.\n\n        === \"Example 1\"\n            ```python\n            to_snake('helloWorld')\n            ```\n            hello_world\n\n        === \"Example 2\"\n            ```python\n            to_snake('Some-Mixed_string With spaces-underscores-and-hyphens')\n            ```\n            some_mixed_string_with_spaces_underscores_and_hyphens\n\n        === \"Example 3\"\n            ```python\n            to_snake('CamelCase')\n            ```\n            camel_case\n\n    Info: Important\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function will convert any uppercase letters to lowercase, and separate words with underscores.\n        - If the input string already has snake_case formatting, the function will return it unchanged.\n        - This function uses regular expressions to identify words in the input string.\n\n    \"\"\"\n\n    text: str = text.strip()\n\n    if not text:\n        # If the input string is empty or only whitespace, return an empty string\n        return \"\"\n\n    # Remove any non-alphanumeric characters and split the string into words\n    words = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\"_\\1\", re.sub(\"([A-Z]+)\", r\"_\\1\", text)).split()], [])\n\n    # Join the words back together to form the snake_case string\n    return \"_\".join([word.lower() for word in words])\n</code></pre>"},{"location":"strplus/functions/","title":"Functions","text":""},{"location":"strplus/functions/#strplus.functions.cast_sep_to_comma","title":"<code>cast_sep_to_comma(input_string, separator=None)</code>","text":"<p>Replaces a specified separator or the automatically detected one with a comma in the input string.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The input string to replace separators in.</p> required <code>separator</code> <code>Optional[str]</code> <p>The separator to replace with a comma. If None, the function will attempt to determine the appropriate separator based on the input string. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string resulting from replacing the specified or detected separator with a comma.</p> <p>This example shows how to use <code>cast_sep_to_comma()</code> to replace a separator in a string</p> Example 1Example 2 <p><pre><code>cast_sep_to_comma(\"one-two-three\", \"-\")\n</code></pre> Returns: <pre><code>\"one,two,three\"\n</code></pre></p> <p><pre><code>cast_sep_to_comma(\"one two three\")\n</code></pre> Returns: <pre><code>\"one,two,three\"\n</code></pre></p> <p>Warning</p> <p>The function will only attempt to detect the separator when the <code>separator</code> argument is None.</p> Tips <ul> <li>If the input string does not contain the specified or detected separator, the function will return the   original input string unchanged.</li> <li>See the <code>get_separator</code> function for more details about how the function will attempt to detect the separator.</li> </ul> Source code in <code>strplus/functions.py</code> <pre><code>def cast_sep_to_comma(input_string: str, separator: Optional[str] = None) -&gt; str:\n\"\"\"\n\n    Replaces a specified separator or the automatically detected one with a comma in the input string.\n\n    Args:\n        input_string (str): The input string to replace separators in.\n        separator (Optional[str], optional): The separator to replace with a comma. If None, the function will\n            attempt to determine the appropriate separator based on the input string. Defaults to None.\n\n    Returns:\n        str: A string resulting from replacing the specified or detected separator with a comma.\n\n    !!! Example \"This example shows how to use `cast_sep_to_comma()` to replace a separator in a string\"\n\n        === \"Example 1\"\n            ```python\n            cast_sep_to_comma(\"one-two-three\", \"-\")\n            ```\n            Returns:\n            ```\n            \"one,two,three\"\n            ```\n\n        === \"Example 2\"\n            ```python\n            cast_sep_to_comma(\"one two three\")\n            ```\n            Returns:\n            ```\n            \"one,two,three\"\n            ```\n            !!! Warning\n                The function will only attempt to detect the separator when the `separator` argument is None.\n\n    Tips:\n        - If the input string does not contain the specified or detected separator, the function will return the\n          original input string unchanged.\n        - See the `get_separator` function for more details about how the function will attempt to detect the separator.\n    \"\"\"\n\n    # Simple cleansing\n    input_string = input_string.strip()\n\n    if separator is not None:\n        return input_string.replace(separator, \",\")\n    else:\n        separator = get_separator(input_string=input_string)\n        if separator is not None:\n            return input_string.replace(separator, \",\")\n        else:\n            return input_string\n</code></pre>"},{"location":"strplus/functions/#strplus.functions.get_separator","title":"<code>get_separator(input_string, separator_list=None)</code>","text":"<p>Returns the most frequent separator character in an input string.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The input string to analyze.</p> required <code>separator_list</code> <code>Optional[List[str]]</code> <p>A list of separator characters to consider. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>Union[str, None]: The most frequent separator character in the input string, or None if there are no separators.</p> <p>Finding the most frequent separator character</p> <p>This example shows how to use <code>get_separator()</code> to find the most frequent separator character in a string.</p> Example 1Example 2Example 3 <p><pre><code>get_separator(\"John, Doe; Jane | Doe\")\n</code></pre> ','</p> <p><pre><code>get_separator(\"John Doe Jane Doe\")\n</code></pre> \" \"</p> <p><pre><code>get_separator(\"A/B/C\")\n</code></pre> '/'</p> Use tips <ul> <li>If you want to specify a custom list of separator characters, pass it as the <code>separator_list</code> argument.</li> <li>If you want to find the second most frequent separator character (or any other rank), you can modify the code to return a list of separator characters sorted by frequency.</li> </ul> Important <ul> <li>The function assumes that any character that appears at least once in the input string is a potential separator.</li> <li>The function uses a common list of separator characters by default, but this list may not be appropriate for all types of input strings.</li> <li>The function returns None if there are no separators in the input string.</li> </ul> Source code in <code>strplus/functions.py</code> <pre><code>def get_separator(input_string, separator_list: Optional[List[str]] = None):\n\"\"\"\n\n    Returns the most frequent separator character in an input string.\n\n    Args:\n        input_string (str): The input string to analyze.\n        separator_list (Optional[List[str]], optional): A list of separator characters to consider. Defaults to None.\n\n    Returns:\n        Union[str, None]: The most frequent separator character in the input string, or None if there are no separators.\n\n    !!! Example \"Finding the most frequent separator character\"\n        This example shows how to use `get_separator()` to find the most frequent separator character in a string.\n\n        === \"Example 1\"\n            ```python\n            get_separator(\"John, Doe; Jane | Doe\")\n            ```\n            ','\n\n        === \"Example 2\"\n            ```python\n            get_separator(\"John Doe Jane Doe\")\n            ```\n            \" \"\n\n        === \"Example 3\"\n            ```python\n            get_separator(\"A/B/C\")\n            ```\n            '/'\n\n    Tip: Use tips\n        - If you want to specify a custom list of separator characters, pass it as the `separator_list` argument.\n        - If you want to find the second most frequent separator character (or any other rank), you can modify the code to return a list of separator characters sorted by frequency.\n\n    Info: Important\n        - The function assumes that any character that appears at least once in the input string is a potential separator.\n        - The function uses a common list of separator characters by default, but this list may not be appropriate for all types of input strings.\n        - The function returns None if there are no separators in the input string.\n\n    \"\"\"\n\n    # Common separator list by priority!\n    common_separators = [\",\", \";\", \"|\", \" \", \"\\t\", \":\", \"/\", \"\\\\\", \"\\n\"]\n    input_string = input_string.strip()\n\n    # Setting the separator list\n    separator_list_target = separator_list if separator_list is not None and len(separator_list) &gt; 0 else common_separators\n\n    sep_frequency = {sep: input_string.count(sep) for sep in separator_list_target if input_string.count(sep) &gt; 0}\n    most_frequent_separator = None\n\n    if len(sep_frequency) &gt; 0:\n        max_value = max(sep_frequency.values())\n        max_frequency = [key for key, value in sep_frequency.items() if value == max_value]\n        sep_sorted_by_priority = sorted(max_frequency, key=lambda x: separator_list_target.index(x))\n        most_frequent_separator = sep_sorted_by_priority[0]\n\n    if most_frequent_separator is None:\n        print(f\"common separators not found in the string provided, please inform the separator_list!\\ncommon separator:\\n{common_separators}\")\n\n    return most_frequent_separator\n</code></pre>"},{"location":"strplus/functions/#strplus.functions.split_by_separator","title":"<code>split_by_separator(input_string, separator=None)</code>","text":"<p>Splits a string into a list of strings using the specified separator(s), base in the built-in common separators.</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The input string to split.</p> required <code>separator</code> <code>Optional[Union[List[str], str]]</code> <p>The separator(s) to use when splitting the input string. This can be a single string, a list of strings, or None. If None, the function will attempt to determine the appropriate separator based on the input string. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of strings resulting from splitting the input string using the specified separator(s).</p> <p>This example shows how to use <code>split_by_separator()</code> to split a string using a single separator</p> Example 1Example 2Example 3 <p><pre><code>split_by_separator(\"one,two,three\", \",\")\n</code></pre> Returns: <pre><code>[\"one\", \"two\", \"three\"]\n</code></pre></p> <p><pre><code>split_by_separator(\"one-two three|four\", [\"-\", \" \", \"|\"])\n</code></pre> Returns: <pre><code>['one', 'two three|four']\n</code></pre></p> <p>Warning</p> <p>Only one separator frequency found in the list provided, so the priority will be respect!</p> <p><pre><code>split_by_separator(\"one two three four\")\n</code></pre> Returns: <pre><code>[\"one\", \"two\", \"three\", \"four\"]\n</code></pre></p> Tips <ul> <li>If the input string contains multiple consecutive instances of the specified separator(s), the resulting   list may contain empty strings. To remove empty strings from the resulting list, you can use a list   comprehension to filter out any empty strings.</li> <li>See the <code>get_separator</code> for mor details about how the function will attempt to determine the appropriate separator.</li> </ul> Important <ul> <li>If the separator is a list of strings, the function will attempt to determine the appropriate separator   to use based on the input string. If no appropriate separator is found, the function will return the   original input string as a single-element list.</li> </ul> Source code in <code>strplus/functions.py</code> <pre><code>def split_by_separator(input_string: str, separator: Optional[Union[List[str], str]] = None) -&gt; List[str]:\n\"\"\"\n\n    Splits a string into a list of strings using the specified separator(s), base in the built-in common separators.\n\n    Args:\n        input_string (str): The input string to split.\n        separator (Optional[Union[List[str], str]], optional): The separator(s) to use when splitting the input string.\n            This can be a single string, a list of strings, or None. If None, the function will attempt to determine\n            the appropriate separator based on the input string. Defaults to None.\n\n    Returns:\n        List[str]: A list of strings resulting from splitting the input string using the specified separator(s).\n\n    !!! Example \"This example shows how to use `split_by_separator()` to split a string using a single separator\"\n\n        === \"Example 1\"\n            ```python\n            split_by_separator(\"one,two,three\", \",\")\n            ```\n            Returns:\n            ```\n            [\"one\", \"two\", \"three\"]\n            ```\n\n        === \"Example 2\"\n            ```python\n            split_by_separator(\"one-two three|four\", [\"-\", \" \", \"|\"])\n            ```\n            Returns:\n            ```\n            ['one', 'two three|four']\n            ```\n            !!! Warning\n                Only one separator frequency found in the list provided, so the priority will be respect!\n\n        === \"Example 3\"\n            ```python\n            split_by_separator(\"one two three four\")\n            ```\n            Returns:\n            ```\n            [\"one\", \"two\", \"three\", \"four\"]\n            ```\n\n    Tips:\n        - If the input string contains multiple consecutive instances of the specified separator(s), the resulting\n          list may contain empty strings. To remove empty strings from the resulting list, you can use a list\n          comprehension to filter out any empty strings.\n        - See the `get_separator` for mor details about how the function will attempt to determine the appropriate separator.\n\n    Info: Important\n        - If the separator is a list of strings, the function will attempt to determine the appropriate separator\n          to use based on the input string. If no appropriate separator is found, the function will return the\n          original input string as a single-element list.\n    \"\"\"\n\n    input_string = input_string.strip()\n\n    if separator is None:\n        target_separator = get_separator(input_string=input_string)\n        if target_separator is not None:\n            return input_string.split(target_separator)\n    elif isinstance(separator, list):\n        target_separator = get_separator(input_string=input_string, separator_list=separator)\n        if target_separator is not None:\n            return input_string.split(target_separator)\n    else:\n        return input_string.split(separator)\n</code></pre>"},{"location":"strplus/functions/#strplus.functions.to_list","title":"<code>to_list(text)</code>","text":"<p>Converts a string to a list of strings, where each word is a separate element in the list.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input string.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of strings, where each word in the input string is a separate element in the list.</p> <p>Converting a string to a list</p> <p>This example shows how to use <code>to_list()</code> to convert a string to a list.</p> Example 1Example 2Example 3Example 4 <p><pre><code>to_list('hello world')\n</code></pre> ['hello', 'world']</p> <p><pre><code>to_list('HelloWorld')\n</code></pre> ['Hello', 'World']</p> <p><pre><code>to_list('some-mixed_string With spaces_underscores-and-hyphens')\n</code></pre> ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']</p> <p><pre><code>to_list('123abc')\n</code></pre> ['123abc']</p> Use tips <ul> <li>If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.</li> <li>If you need to remove duplicates from the list, you can convert it to a set and then back to a list.</li> </ul> Important <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> Source code in <code>strplus/functions.py</code> <pre><code>def to_list(text: str) -&gt; List[str]:\n\"\"\"\n\n    Converts a string to a list of strings, where each word is a separate element in the list.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        List[str]: A list of strings, where each word in the input string is a separate element in the list.\n\n    !!! Example \"Converting a string to a list\"\n        This example shows how to use `to_list()` to convert a string to a list.\n\n        === \"Example 1\"\n            ```python\n            to_list('hello world')\n            ```\n            ['hello', 'world']\n\n        === \"Example 2\"\n            ```python\n            to_list('HelloWorld')\n            ```\n            ['Hello', 'World']\n\n        === \"Example 3\"\n            ```python\n            to_list('some-mixed_string With spaces_underscores-and-hyphens')\n            ```\n            ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']\n\n        === \"Example 4\"\n            ```python\n            to_list('123abc')\n            ```\n            ['123abc']\n\n    Tip: Use tips\n        - If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.\n        - If you need to remove duplicates from the list, you can convert it to a set and then back to a list.\n\n    Info: Important\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function uses regular expressions to identify words in the input string.\n\n    \"\"\"\n    text = text.strip()\n\n    if not text:  # If the input string is empty or only whitespace, return an empty list\n        return []\n\n    # Remove any non-alphanumeric characters and split the string into words\n    word_list = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\"_\\1\", re.sub(\"([A-Z]+)\", r\"_\\1\", text)).split()], [])\n\n    return word_list\n</code></pre>"},{"location":"strplus/strplus/","title":"Strplus","text":""},{"location":"strplus/strplus/#strplus.strplus.Str","title":"<code>Str</code>","text":"<p>         Bases: <code>str</code></p> <p>Str Class</p> <p>The Str Class is a Wrapper class that extends the str Class, giving it superpowers to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want! All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.</p> <p>Easy and simple no parentheses!</p> Snake caseCamel casePascal <p><pre><code>my_string = Str(\"Cast_this_StringToSnake\")\nmy_string.snake\n</code></pre> cast_this_string_to_snake</p> <p><pre><code>my_string = Str(\"cast_this_string_to_camel\")\nmy_string.camel\n</code></pre> castThisStringToCamel</p> <p><pre><code>my_string = Str(\"Cast_this_string_TO_Pascal!\")\nmy_string.pascal\n</code></pre> CastThisStringToPascal</p> <p>Use parentheses if you prefer!</p> <p><pre><code>my_string = Str(\"HelloWorld\")\nmy_string.to_snake()\n</code></pre> hello_world</p> Source code in <code>strplus/strplus.py</code> <pre><code>class Str(str):\n\"\"\"\n\n    !!! Info \"Str Class\"\n\n        The Str Class is a Wrapper class that extends the str Class, giving it superpowers\n        to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want!\n        All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.\n\n    !!! Example \"Easy and simple no parentheses!\"\n\n        === \"Snake case\"\n            ```python\n            my_string = Str(\"Cast_this_StringToSnake\")\n            my_string.snake\n            ```\n            cast_this_string_to_snake\n\n        === \"Camel case\"\n            ```python\n            my_string = Str(\"cast_this_string_to_camel\")\n            my_string.camel\n            ```\n            castThisStringToCamel\n\n        === \"Pascal\"\n            ```python\n            my_string = Str(\"Cast_this_string_TO_Pascal!\")\n            my_string.pascal\n            ```\n            CastThisStringToPascal\n\n\n    !!! Tip \"Use parentheses if you prefer!\"\n\n        ```python\n        my_string = Str(\"HelloWorld\")\n        my_string.to_snake()\n\n        ```\n        hello_world\n\n    \"\"\"\n\n    def __new__(cls, *args, **kwargs):\n        if not all(isinstance(arg, str) for arg in args):\n            raise TypeError(\"Str argument must be a string\")\n        return super().__new__(cls, *args, **kwargs)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n\n        def __new__(cls, *args, **kwargs):\n            return super().__new__(cls, *args, **kwargs)\n\n    @property\n    def pascal(self):\n\"\"\"\n        pascal is an alias for [`to_pascal`][strplus.Str.to_pascal]\n        \"\"\"\n        return self.to_pascal()\n\n    @property\n    def camel(self):\n\"\"\"\n        camel is an alias for [`to_camel`][strplus.Str.to_camel]\n        \"\"\"\n        return self.to_camel()\n\n    @property\n    def snake(self):\n\"\"\"\n        snake is an alias for [`to_snake`][strplus.Str.to_snake]\n        \"\"\"\n        return self.to_snake()\n\n    @property\n    def list(self):\n\"\"\"\n        list is an alias for [`to_list`][strplus.Str.to_list]\n        \"\"\"\n        return self.to_list()\n\n    @property\n    def split_by_sep(self):\n\"\"\"\n        split_by_sep is an alias for [`split_by_separator`][strplus.Str.split_by_separator]\n        \"\"\"\n        return self.to_list()\n\n    @property\n    def sep_to_comma(self):\n\"\"\"\n        sep_to_comma is an alias for [`cast_sep_to_comma`][strplus.Str.cast_sep_to_comma]\n        \"\"\"\n        return self.cast_sep_to_comma()\n\n    @property\n    def print(self):\n\"\"\"\n        print is an alias for `str.print`\n        \"\"\"\n        print(self)\n\n    def to_pascal(self):\n\"\"\"\n\n        Simple method to converts a string to PascalCase.\n        Implementation of [strplus.cases.to_pascal][]\n\n        Returns:\n            str: The PascalCase version of the input string.\n\n        !!! Example\n\n            ```python\n            my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n            my_string.to_pascal()\n            ```\n            SomeMixedStringWithSpacesUnderscoresAndHyphens\n\n        \"\"\"\n        return Str(to_pascal(self))\n\n    def to_camel(self):\n\"\"\"\n\n        Converts a string from any case to CamelCase.\n        Implementation of [strplus.cases.to_camel][]\n\n        Returns:\n            str: The converted string in CamelCase.\n\n        !!! Example\n\n            === \"Example 01\"\n                ```\n                my_string = Str('this_is-an_example')\n                my_string.to_camel()\n                ```\n                thisIsAnExample\n\n            === \"Example 02\"\n                ```\n                my_string = Str('This is a test!')\n                my_string.to_camel()\n                ```\n                thisIsATest\n\n        \"\"\"\n        return Str(to_camel(self))\n\n    def to_snake(self):\n\"\"\"\n\n        Converts a string to snake_case.\n        Implementation of [strplus.cases.to_snake][]\n\n        Returns:\n            str: The string converted to snake_case.\n\n        !!! Example \"Examples\"\n\n            === \"Example 01\"\n                ```\n                my_string = Str(\"HelloWorld\")\n                my_string.snake(\"HelloWorld\")\n                ```\n                hello_world\n\n            === \"Example 02\"\n                ```\n                my_string = Str(\"  AnotherString!  \")\n                my_string.to_snake()\n                ```\n                another_string\n\n            === \"Example 03\"\n                ```\n                my_string = Str(\"hello-world\")\n                my_string.to_snake()\n                ```\n                hello_world\n\n        \"\"\"\n        return Str(to_snake(self))\n\n    def to_list(self):\n\"\"\"\n\n        Converts a string to a list of strings, where each word is a separate element in the list.\n        Implementation of [strplus.functions.to_list][]\n\n        Returns:\n            List[str]: A list of strings, where each word in the input string is a separate element in the list.\n\n        !!! Example \"Converting a string to a list\"\n            This example shows how to use `to_list()` to convert a string to a list.\n\n            === \"Example 1\"\n                ```python\n                my_string = Str('hello world')\n                my_string.to_list\n                ```\n                ['hello', 'world']\n\n\n            === \"Example 2\"\n                ```python\n                my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n                my_string.to_list\n                ```\n                ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']\n\n            === \"Example 2\"\n                ```python\n                my_string = Str('123abc')\n                my_string.to_list\n                ```\n                ['123abc']\n\n        Tip: Use tips\n            - If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.\n            - If you need to remove duplicates from the list, you can convert it to a set and then back to a list.\n\n        Info: Important\n            - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n            - This function uses regular expressions to identify words in the input string.\n\n        \"\"\"\n        return [Str(word) for word in to_list(self)]\n\n    def split_by_separator(self, separator: Optional[Union[List[str], str]] = None):\n\"\"\"\n\n        Splits a string into a list of strings using the specified separator(s), base in the built-in common separators.\n        Implementation of [strplus.functions.split_by_separator][]\n\n        Args:\n            input_string (str): The input string to split.\n            separator (Optional[Union[List[str], str]], optional): The separator(s) to use when splitting the input string.\n                This can be a single string, a list of strings, or None. If None, the function will attempt to determine\n                the appropriate separator based on the input string. Defaults to None.\n\n        Returns:\n            List[str]: A list of strings resulting from splitting the input string using the specified separator(s).\n\n        !!! Example \"This example shows how to use `split_by_separator()` to split a string using a single separator\"\n\n            === \"Example 1\"\n                ```python\n                my_string = Str(\"one,two,three\")\n                my_string.split_by_separator(\",\")\n                ```\n                Returns:\n                ```\n                [\"one\", \"two\", \"three\"]\n                ```\n\n            === \"Example 2\"\n                ```python\n                my_string = Str(\"one-two three|four\")\n                my_string.split_by_separator([\"-\", \" \", \"|\"])\n                ```\n                Returns:\n                ```\n                ['one', 'two three|four']\n                ```\n                !!! Warning\n                    Only one separator frequency found in the list provided, so the priority will be respect!\n\n            === \"Example 3\"\n                ```python\n                my_string = Str(\"one two three four\")\n                my_string.split_by_separator()\n                ```\n                Returns:\n                ```\n                [\"one\", \"two\", \"three\", \"four\"]\n                ```\n\n        Tips:\n            - If the input string contains multiple consecutive instances of the specified separator(s), the resulting\n            list may contain empty strings. To remove empty strings from the resulting list, you can use a list\n            comprehension to filter out any empty strings.\n            - See the `get_separator` for mor details about how the function will attempt to determine the appropriate separator.\n\n        Info: Important\n            - If the separator is a list of strings, the function will attempt to determine the appropriate separator\n            to use based on the input string. If no appropriate separator is found, the function will return the\n            original input string as a single-element list.\n        \"\"\"\n        return [Str(word) for word in split_by_separator(self, separator=separator)]\n\n    def cast_sep_to_comma(self, separator: Optional[str] = None):\n\"\"\"\n\n        Replaces a specified separator or the automatically detected one with a comma in the input string.\n        Implementation of [strplus.functions.cast_sep_to_comma][]\n\n        Args:\n            input_string (str): The input string to replace separators in.\n            separator (Optional[str], optional): The separator to replace with a comma. If None, the function will\n                attempt to determine the appropriate separator based on the input string. Defaults to None.\n\n        Returns:\n            str: A string resulting from replacing the specified or detected separator with a comma.\n\n        !!! Example \"This example shows how to use `cast_sep_to_comma()` to replace a separator in a string\"\n\n            === \"Example 1\"\n                ```python\n                my_string = Str(\"one-two-three\", \"-\")\n                my_string.cast_sep_to_comma(\"-\")\n                ```\n                Returns:\n                ```\n                \"one,two,three\"\n                ```\n\n            === \"Example 2\"\n                ```python\n                my_string = Str(\"one two three\")\n                my_string.cast_sep_to_comma()\n                ```\n                Returns:\n                ```\n                \"one,two,three\"\n                ```\n                !!! Warning\n                    The function will only attempt to detect the separator when the `separator` argument is None.\n\n        Tips:\n            - If the input string does not contain the specified or detected separator, the function will return the\n            original input string unchanged.\n            - See the `get_separator` function for more details about how the function will attempt to detect the separator.\n        \"\"\"\n        return Str(cast_sep_to_comma(self, separator=separator))\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.camel","title":"<code>camel</code>  <code>property</code>","text":"<p>camel is an alias for <code>to_camel</code></p>"},{"location":"strplus/strplus/#strplus.strplus.Str.list","title":"<code>list</code>  <code>property</code>","text":"<p>list is an alias for <code>to_list</code></p>"},{"location":"strplus/strplus/#strplus.strplus.Str.pascal","title":"<code>pascal</code>  <code>property</code>","text":"<p>pascal is an alias for <code>to_pascal</code></p>"},{"location":"strplus/strplus/#strplus.strplus.Str.print","title":"<code>print</code>  <code>property</code>","text":"<p>print is an alias for <code>str.print</code></p>"},{"location":"strplus/strplus/#strplus.strplus.Str.sep_to_comma","title":"<code>sep_to_comma</code>  <code>property</code>","text":"<p>sep_to_comma is an alias for <code>cast_sep_to_comma</code></p>"},{"location":"strplus/strplus/#strplus.strplus.Str.snake","title":"<code>snake</code>  <code>property</code>","text":"<p>snake is an alias for <code>to_snake</code></p>"},{"location":"strplus/strplus/#strplus.strplus.Str.split_by_sep","title":"<code>split_by_sep</code>  <code>property</code>","text":"<p>split_by_sep is an alias for <code>split_by_separator</code></p>"},{"location":"strplus/strplus/#strplus.strplus.Str.cast_sep_to_comma","title":"<code>cast_sep_to_comma(separator=None)</code>","text":"<p>Replaces a specified separator or the automatically detected one with a comma in the input string. Implementation of strplus.functions.cast_sep_to_comma</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The input string to replace separators in.</p> required <code>separator</code> <code>Optional[str]</code> <p>The separator to replace with a comma. If None, the function will attempt to determine the appropriate separator based on the input string. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <p>A string resulting from replacing the specified or detected separator with a comma.</p> <p>This example shows how to use <code>cast_sep_to_comma()</code> to replace a separator in a string</p> Example 1Example 2 <p><pre><code>my_string = Str(\"one-two-three\", \"-\")\nmy_string.cast_sep_to_comma(\"-\")\n</code></pre> Returns: <pre><code>\"one,two,three\"\n</code></pre></p> <p><pre><code>my_string = Str(\"one two three\")\nmy_string.cast_sep_to_comma()\n</code></pre> Returns: <pre><code>\"one,two,three\"\n</code></pre></p> <p>Warning</p> <p>The function will only attempt to detect the separator when the <code>separator</code> argument is None.</p> Tips <ul> <li>If the input string does not contain the specified or detected separator, the function will return the original input string unchanged.</li> <li>See the <code>get_separator</code> function for more details about how the function will attempt to detect the separator.</li> </ul> Source code in <code>strplus/strplus.py</code> <pre><code>def cast_sep_to_comma(self, separator: Optional[str] = None):\n\"\"\"\n\n    Replaces a specified separator or the automatically detected one with a comma in the input string.\n    Implementation of [strplus.functions.cast_sep_to_comma][]\n\n    Args:\n        input_string (str): The input string to replace separators in.\n        separator (Optional[str], optional): The separator to replace with a comma. If None, the function will\n            attempt to determine the appropriate separator based on the input string. Defaults to None.\n\n    Returns:\n        str: A string resulting from replacing the specified or detected separator with a comma.\n\n    !!! Example \"This example shows how to use `cast_sep_to_comma()` to replace a separator in a string\"\n\n        === \"Example 1\"\n            ```python\n            my_string = Str(\"one-two-three\", \"-\")\n            my_string.cast_sep_to_comma(\"-\")\n            ```\n            Returns:\n            ```\n            \"one,two,three\"\n            ```\n\n        === \"Example 2\"\n            ```python\n            my_string = Str(\"one two three\")\n            my_string.cast_sep_to_comma()\n            ```\n            Returns:\n            ```\n            \"one,two,three\"\n            ```\n            !!! Warning\n                The function will only attempt to detect the separator when the `separator` argument is None.\n\n    Tips:\n        - If the input string does not contain the specified or detected separator, the function will return the\n        original input string unchanged.\n        - See the `get_separator` function for more details about how the function will attempt to detect the separator.\n    \"\"\"\n    return Str(cast_sep_to_comma(self, separator=separator))\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.split_by_separator","title":"<code>split_by_separator(separator=None)</code>","text":"<p>Splits a string into a list of strings using the specified separator(s), base in the built-in common separators. Implementation of strplus.functions.split_by_separator</p> <p>Parameters:</p> Name Type Description Default <code>input_string</code> <code>str</code> <p>The input string to split.</p> required <code>separator</code> <code>Optional[Union[List[str], str]]</code> <p>The separator(s) to use when splitting the input string. This can be a single string, a list of strings, or None. If None, the function will attempt to determine the appropriate separator based on the input string. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <p>List[str]: A list of strings resulting from splitting the input string using the specified separator(s).</p> <p>This example shows how to use <code>split_by_separator()</code> to split a string using a single separator</p> Example 1Example 2Example 3 <p><pre><code>my_string = Str(\"one,two,three\")\nmy_string.split_by_separator(\",\")\n</code></pre> Returns: <pre><code>[\"one\", \"two\", \"three\"]\n</code></pre></p> <p><pre><code>my_string = Str(\"one-two three|four\")\nmy_string.split_by_separator([\"-\", \" \", \"|\"])\n</code></pre> Returns: <pre><code>['one', 'two three|four']\n</code></pre></p> <p>Warning</p> <p>Only one separator frequency found in the list provided, so the priority will be respect!</p> <p><pre><code>my_string = Str(\"one two three four\")\nmy_string.split_by_separator()\n</code></pre> Returns: <pre><code>[\"one\", \"two\", \"three\", \"four\"]\n</code></pre></p> Tips <ul> <li>If the input string contains multiple consecutive instances of the specified separator(s), the resulting list may contain empty strings. To remove empty strings from the resulting list, you can use a list comprehension to filter out any empty strings.</li> <li>See the <code>get_separator</code> for mor details about how the function will attempt to determine the appropriate separator.</li> </ul> Important <ul> <li>If the separator is a list of strings, the function will attempt to determine the appropriate separator to use based on the input string. If no appropriate separator is found, the function will return the original input string as a single-element list.</li> </ul> Source code in <code>strplus/strplus.py</code> <pre><code>def split_by_separator(self, separator: Optional[Union[List[str], str]] = None):\n\"\"\"\n\n    Splits a string into a list of strings using the specified separator(s), base in the built-in common separators.\n    Implementation of [strplus.functions.split_by_separator][]\n\n    Args:\n        input_string (str): The input string to split.\n        separator (Optional[Union[List[str], str]], optional): The separator(s) to use when splitting the input string.\n            This can be a single string, a list of strings, or None. If None, the function will attempt to determine\n            the appropriate separator based on the input string. Defaults to None.\n\n    Returns:\n        List[str]: A list of strings resulting from splitting the input string using the specified separator(s).\n\n    !!! Example \"This example shows how to use `split_by_separator()` to split a string using a single separator\"\n\n        === \"Example 1\"\n            ```python\n            my_string = Str(\"one,two,three\")\n            my_string.split_by_separator(\",\")\n            ```\n            Returns:\n            ```\n            [\"one\", \"two\", \"three\"]\n            ```\n\n        === \"Example 2\"\n            ```python\n            my_string = Str(\"one-two three|four\")\n            my_string.split_by_separator([\"-\", \" \", \"|\"])\n            ```\n            Returns:\n            ```\n            ['one', 'two three|four']\n            ```\n            !!! Warning\n                Only one separator frequency found in the list provided, so the priority will be respect!\n\n        === \"Example 3\"\n            ```python\n            my_string = Str(\"one two three four\")\n            my_string.split_by_separator()\n            ```\n            Returns:\n            ```\n            [\"one\", \"two\", \"three\", \"four\"]\n            ```\n\n    Tips:\n        - If the input string contains multiple consecutive instances of the specified separator(s), the resulting\n        list may contain empty strings. To remove empty strings from the resulting list, you can use a list\n        comprehension to filter out any empty strings.\n        - See the `get_separator` for mor details about how the function will attempt to determine the appropriate separator.\n\n    Info: Important\n        - If the separator is a list of strings, the function will attempt to determine the appropriate separator\n        to use based on the input string. If no appropriate separator is found, the function will return the\n        original input string as a single-element list.\n    \"\"\"\n    return [Str(word) for word in split_by_separator(self, separator=separator)]\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.to_camel","title":"<code>to_camel()</code>","text":"<p>Converts a string from any case to CamelCase. Implementation of strplus.cases.to_camel</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The converted string in CamelCase.</p> <p>Example</p> Example 01Example 02 <p><pre><code>my_string = Str('this_is-an_example')\nmy_string.to_camel()\n</code></pre> thisIsAnExample</p> <p><pre><code>my_string = Str('This is a test!')\nmy_string.to_camel()\n</code></pre> thisIsATest</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_camel(self):\n\"\"\"\n\n    Converts a string from any case to CamelCase.\n    Implementation of [strplus.cases.to_camel][]\n\n    Returns:\n        str: The converted string in CamelCase.\n\n    !!! Example\n\n        === \"Example 01\"\n            ```\n            my_string = Str('this_is-an_example')\n            my_string.to_camel()\n            ```\n            thisIsAnExample\n\n        === \"Example 02\"\n            ```\n            my_string = Str('This is a test!')\n            my_string.to_camel()\n            ```\n            thisIsATest\n\n    \"\"\"\n    return Str(to_camel(self))\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.to_list","title":"<code>to_list()</code>","text":"<p>Converts a string to a list of strings, where each word is a separate element in the list. Implementation of strplus.functions.to_list</p> <p>Returns:</p> Type Description <p>List[str]: A list of strings, where each word in the input string is a separate element in the list.</p> <p>Converting a string to a list</p> <p>This example shows how to use <code>to_list()</code> to convert a string to a list.</p> Example 1Example 2Example 2 <p><pre><code>my_string = Str('hello world')\nmy_string.to_list\n</code></pre> ['hello', 'world']</p> <p><pre><code>my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\nmy_string.to_list\n</code></pre> ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']</p> <p><pre><code>my_string = Str('123abc')\nmy_string.to_list\n</code></pre> ['123abc']</p> Use tips <ul> <li>If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.</li> <li>If you need to remove duplicates from the list, you can convert it to a set and then back to a list.</li> </ul> Important <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> Source code in <code>strplus/strplus.py</code> <pre><code>def to_list(self):\n\"\"\"\n\n    Converts a string to a list of strings, where each word is a separate element in the list.\n    Implementation of [strplus.functions.to_list][]\n\n    Returns:\n        List[str]: A list of strings, where each word in the input string is a separate element in the list.\n\n    !!! Example \"Converting a string to a list\"\n        This example shows how to use `to_list()` to convert a string to a list.\n\n        === \"Example 1\"\n            ```python\n            my_string = Str('hello world')\n            my_string.to_list\n            ```\n            ['hello', 'world']\n\n\n        === \"Example 2\"\n            ```python\n            my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n            my_string.to_list\n            ```\n            ['some', 'mixed', 'string', 'With', 'spaces', 'underscores', 'and', 'hyphens']\n\n        === \"Example 2\"\n            ```python\n            my_string = Str('123abc')\n            my_string.to_list\n            ```\n            ['123abc']\n\n    Tip: Use tips\n        - If you need to convert a string to a list of integers or floats, you can use list comprehension to convert each element to the desired type.\n        - If you need to remove duplicates from the list, you can convert it to a set and then back to a list.\n\n    Info: Important\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function uses regular expressions to identify words in the input string.\n\n    \"\"\"\n    return [Str(word) for word in to_list(self)]\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.to_pascal","title":"<code>to_pascal()</code>","text":"<p>Simple method to converts a string to PascalCase. Implementation of strplus.cases.to_pascal</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The PascalCase version of the input string.</p> <p>Example</p> <p><pre><code>my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\nmy_string.to_pascal()\n</code></pre> SomeMixedStringWithSpacesUnderscoresAndHyphens</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_pascal(self):\n\"\"\"\n\n    Simple method to converts a string to PascalCase.\n    Implementation of [strplus.cases.to_pascal][]\n\n    Returns:\n        str: The PascalCase version of the input string.\n\n    !!! Example\n\n        ```python\n        my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n        my_string.to_pascal()\n        ```\n        SomeMixedStringWithSpacesUnderscoresAndHyphens\n\n    \"\"\"\n    return Str(to_pascal(self))\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.to_snake","title":"<code>to_snake()</code>","text":"<p>Converts a string to snake_case. Implementation of strplus.cases.to_snake</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The string converted to snake_case.</p> <p>Examples</p> Example 01Example 02Example 03 <p><pre><code>my_string = Str(\"HelloWorld\")\nmy_string.snake(\"HelloWorld\")\n</code></pre> hello_world</p> <p><pre><code>my_string = Str(\"  AnotherString!  \")\nmy_string.to_snake()\n</code></pre> another_string</p> <p><pre><code>my_string = Str(\"hello-world\")\nmy_string.to_snake()\n</code></pre> hello_world</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_snake(self):\n\"\"\"\n\n    Converts a string to snake_case.\n    Implementation of [strplus.cases.to_snake][]\n\n    Returns:\n        str: The string converted to snake_case.\n\n    !!! Example \"Examples\"\n\n        === \"Example 01\"\n            ```\n            my_string = Str(\"HelloWorld\")\n            my_string.snake(\"HelloWorld\")\n            ```\n            hello_world\n\n        === \"Example 02\"\n            ```\n            my_string = Str(\"  AnotherString!  \")\n            my_string.to_snake()\n            ```\n            another_string\n\n        === \"Example 03\"\n            ```\n            my_string = Str(\"hello-world\")\n            my_string.to_snake()\n            ```\n            hello_world\n\n    \"\"\"\n    return Str(to_snake(self))\n</code></pre>"}]}