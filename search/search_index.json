{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Extend your string powers with Str+","text":""},{"location":"#strplus.strplus.Str","title":"<code>Str</code>","text":"<p>         Bases: <code>str</code></p> <p>Info</p> <p>The Str Class is a Wrapper class that extends the str Class, giving it superpowers to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want! All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.</p> <p>Never was so easy! Simple no parentheses! </p> Snake caseCamel casePascal <p><pre><code>my_string = Str(\"Cast_this_StringToSnake\")\n\nmy_string.snake\n</code></pre> 'cast_this_string_to_snake'</p> <p><pre><code>my_string = Str(\"cast_this_string_to_camel\")\n\nmy_string.camel\n</code></pre> 'castThisStringToCamel'</p> <p><pre><code>my_string = Str(\"Cast_this_string_TO_Pascal!\")\n\nmy_string.pascal\n</code></pre> 'CastThisStringToPascal'</p> <p>Use parentheses if you prefer!</p> Snake case <p><pre><code>my_string = Str(\"HelloWorld\")\n\nmy_string.to_snake()\n</code></pre> 'hello_world'</p> Source code in <code>strplus/strplus.py</code> <pre><code>class Str(str):\n\"\"\"\n\n    !!! info\n\n        The Str Class is a Wrapper class that extends the str Class, giving it superpowers\n        to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want!\n        All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.\n\n    !!! example \"Never was so easy! Simple no parentheses! \"\n\n        === \"Snake case\"\n            ```python\n            my_string = Str(\"Cast_this_StringToSnake\")\n\n            my_string.snake\n            ```\n            'cast_this_string_to_snake'\n\n        === \"Camel case\"\n            ```python\n            my_string = Str(\"cast_this_string_to_camel\")\n\n            my_string.camel\n            ```\n            'castThisStringToCamel'\n\n        === \"Pascal\"\n            ```python\n            my_string = Str(\"Cast_this_string_TO_Pascal!\")\n\n            my_string.pascal\n            ```\n            'CastThisStringToPascal'\n\n\n    !!! tip \"Use parentheses if you prefer!\"\n\n        === \"Snake case\"\n            ```python\n            my_string = Str(\"HelloWorld\")\n\n            my_string.to_snake()\n\n            ```\n            'hello_world'\n    \"\"\"\n\n    def __new__(cls, *args, **kwargs):\n        if not all(isinstance(arg, str) for arg in args):\n            raise TypeError(\"Str argument must be a string\")\n        return super().__new__(cls, *args, **kwargs)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n\n        def __new__(cls, *args, **kwargs):\n            return super().__new__(cls, *args, **kwargs)\n\n    @property\n    def pascal(self):\n        return self.to_pascal()\n\n    @property\n    def camel(self):\n        return self.to_camel()\n\n    @property\n    def snake(self):\n        return self.to_snake()\n\n    @property\n    def list(self):\n        return self.to_list()\n\n    @property\n    def print(self):\n        print(self)\n\n    def to_pascal(self):\n\"\"\"\n        !!! info\n            Simple method to converts a string to PascalCase.\n            Extend the method: to_pascal\n\n        Returns:\n            str: The PascalCase version of the input string.\n\n\n        !!! example\n\n            ```python\n            my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n\n            my_string.to_pascal()\n            ```\n            'SomeMixedStringWithSpacesUnderscoresAndHyphens'\n\n        \"\"\"\n        return Str(to_pascal(self))\n\n    def to_camel(self):\n\"\"\"Converts a string from any case to CamelCase.\n\n        Returns:\n            str: The converted string in CamelCase.\n\n        Examples:\n\n            &gt;&gt;&gt; my_string = Str('this_is-an_example')\n            &gt;&gt;&gt; my_string.to_camel()\n            'thisIsAnExample'\n\n            &gt;&gt;&gt; my_string = Str('This is a test!')\n            &gt;&gt;&gt; my_string.to_camel()\n            'thisIsATest'\n\n        \"\"\"\n        return Str(to_camel(self))\n\n    def to_snake(self):\n\"\"\"Converts a string to snake_case.\n\n        Returns:\n            str: The string converted to snake_case.\n\n        Examples:\n\n            &gt;&gt;&gt; my_string = Str(\"HelloWorld\")\n            &gt;&gt;&gt; my_string.snake(\"HelloWorld\")\n            'hello_world'\n\n            &gt;&gt;&gt; my_string = Str(\"  AnotherString!  \")\n            &gt;&gt;&gt; my_string.to_snake()\n            'another_string'\n\n            &gt;&gt;&gt;  my_string = Str(\"hello-world\")\n            &gt;&gt;&gt; my_string.to_snake()\n            'hello_world'\n\n        \"\"\"\n        return Str(to_snake(self))\n\n    def to_list(self):\n        return [Str(word) for word in to_list(self)]\n</code></pre>"},{"location":"#strplus.strplus.Str.to_camel","title":"<code>to_camel()</code>","text":"<p>Converts a string from any case to CamelCase.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The converted string in CamelCase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; my_string = Str('this_is-an_example')\n&gt;&gt;&gt; my_string.to_camel()\n'thisIsAnExample'\n</code></pre> <pre><code>&gt;&gt;&gt; my_string = Str('This is a test!')\n&gt;&gt;&gt; my_string.to_camel()\n'thisIsATest'\n</code></pre> Source code in <code>strplus/strplus.py</code> <pre><code>def to_camel(self):\n\"\"\"Converts a string from any case to CamelCase.\n\n    Returns:\n        str: The converted string in CamelCase.\n\n    Examples:\n\n        &gt;&gt;&gt; my_string = Str('this_is-an_example')\n        &gt;&gt;&gt; my_string.to_camel()\n        'thisIsAnExample'\n\n        &gt;&gt;&gt; my_string = Str('This is a test!')\n        &gt;&gt;&gt; my_string.to_camel()\n        'thisIsATest'\n\n    \"\"\"\n    return Str(to_camel(self))\n</code></pre>"},{"location":"#strplus.strplus.Str.to_pascal","title":"<code>to_pascal()</code>","text":"<p>Info</p> <p>Simple method to converts a string to PascalCase. Extend the method: to_pascal</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The PascalCase version of the input string.</p> <p>Example</p> <p><pre><code>my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n\nmy_string.to_pascal()\n</code></pre> 'SomeMixedStringWithSpacesUnderscoresAndHyphens'</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_pascal(self):\n\"\"\"\n    !!! info\n        Simple method to converts a string to PascalCase.\n        Extend the method: to_pascal\n\n    Returns:\n        str: The PascalCase version of the input string.\n\n\n    !!! example\n\n        ```python\n        my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n\n        my_string.to_pascal()\n        ```\n        'SomeMixedStringWithSpacesUnderscoresAndHyphens'\n\n    \"\"\"\n    return Str(to_pascal(self))\n</code></pre>"},{"location":"#strplus.strplus.Str.to_snake","title":"<code>to_snake()</code>","text":"<p>Converts a string to snake_case.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The string converted to snake_case.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; my_string = Str(\"HelloWorld\")\n&gt;&gt;&gt; my_string.snake(\"HelloWorld\")\n'hello_world'\n</code></pre> <pre><code>&gt;&gt;&gt; my_string = Str(\"  AnotherString!  \")\n&gt;&gt;&gt; my_string.to_snake()\n'another_string'\n</code></pre> <pre><code>&gt;&gt;&gt;  my_string = Str(\"hello-world\")\n&gt;&gt;&gt; my_string.to_snake()\n'hello_world'\n</code></pre> Source code in <code>strplus/strplus.py</code> <pre><code>def to_snake(self):\n\"\"\"Converts a string to snake_case.\n\n    Returns:\n        str: The string converted to snake_case.\n\n    Examples:\n\n        &gt;&gt;&gt; my_string = Str(\"HelloWorld\")\n        &gt;&gt;&gt; my_string.snake(\"HelloWorld\")\n        'hello_world'\n\n        &gt;&gt;&gt; my_string = Str(\"  AnotherString!  \")\n        &gt;&gt;&gt; my_string.to_snake()\n        'another_string'\n\n        &gt;&gt;&gt;  my_string = Str(\"hello-world\")\n        &gt;&gt;&gt; my_string.to_snake()\n        'hello_world'\n\n    \"\"\"\n    return Str(to_snake(self))\n</code></pre>"},{"location":"examples/examples_01/","title":"Examples! \u2764\ufe0f","text":"In\u00a0[39]: Copied! <pre>pip install strplus\n</pre> pip install strplus <pre>Requirement already satisfied: strplus in /home/silvio/.pyenv/versions/3.9.16/envs/.envStrPlus/lib/python3.9/site-packages (0.0.11)\nNote: you may need to restart the kernel to use updated packages.\n</pre> In\u00a0[5]: Copied! <pre>from strplus import Str\n</pre> from strplus import Str In\u00a0[41]: Copied! <pre>my_string = Str(\"Cast_this_string_TO_Pascal!\")\n\nmy_string.pascal\n</pre> my_string = Str(\"Cast_this_string_TO_Pascal!\")  my_string.pascal Out[41]: <pre>'CastThisStringToPascal'</pre> In\u00a0[42]: Copied! <pre>my_string = Str(\"cast_this_string_to_camel\")\n\nmy_string.camel\n</pre> my_string = Str(\"cast_this_string_to_camel\")  my_string.camel Out[42]: <pre>'castThisStringToCamel'</pre> In\u00a0[6]: Copied! <pre>my_string = Str(\"Cast_this_StringToSnake\")\n\nmy_string.snake\n</pre> my_string = Str(\"Cast_this_StringToSnake\")  my_string.snake Out[6]: <pre>'cast_this_string_to_snake'</pre> In\u00a0[44]: Copied! <pre>Str(\"CastMeUseLikeANormalFunction\").to_snake()\n</pre> Str(\"CastMeUseLikeANormalFunction\").to_snake() Out[44]: <pre>'cast_me_use_like_a_normal_function'</pre> In\u00a0[45]: Copied! <pre>Str(\"CastThisPath/2021/01/01\").to_snake()\n</pre> Str(\"CastThisPath/2021/01/01\").to_snake() Out[45]: <pre>'cast_this_path_2021_01_01'</pre> In\u00a0[46]: Copied! <pre>Str(\"cast_this_path_to_pascal/2021/01/01\").to_pascal()\n</pre> Str(\"cast_this_path_to_pascal/2021/01/01\").to_pascal() Out[46]: <pre>'CastThisPathToPascal20210101'</pre> In\u00a0[47]: Copied! <pre>Str(\"cat me to_Pascal Please\").to_pascal()\n</pre> Str(\"cat me to_Pascal Please\").to_pascal() Out[47]: <pre>'CatMeToPascalPlease'</pre> In\u00a0[48]: Copied! <pre>my_string.to_camel()\n</pre> my_string.to_camel() Out[48]: <pre>'castThisStringToCamel'</pre> In\u00a0[49]: Copied! <pre>Str(\"reference dataset\").to_camel()\n</pre> Str(\"reference dataset\").to_camel() Out[49]: <pre>'referenceDataset'</pre> In\u00a0[50]: Copied! <pre># Complex return, recursive Str\nStr(\"MyStringWorks\").to_snake().split(\"_\")[0].pascal\n</pre> # Complex return, recursive Str Str(\"MyStringWorks\").to_snake().split(\"_\")[0].pascal Out[50]: <pre>'My'</pre> <pre><code>ad-note\n\n\"_\".join returns a str class not a not or Str with the good features!\nIn the Str we only have recessivity we are not overwriting the str from the global to Str, so it's normal and expected that behavior \n</code></pre> In\u00a0[51]: Copied! <pre>try:\n    \"_\".join(Str(\"MyStringWorks\").to_snake().split(\"_\")[0:1]).pascal\nexcept Exception as e:\n    print(e)\n</pre> try:     \"_\".join(Str(\"MyStringWorks\").to_snake().split(\"_\")[0:1]).pascal except Exception as e:     print(e) <pre>'str' object has no attribute 'pascal'\n</pre> In\u00a0[52]: Copied! <pre># you always has the built-in native Python functions\nmy_string.upper()\n</pre> # you always has the built-in native Python functions my_string.upper() Out[52]: <pre>'CAST_THIS_STRINGTOCAMEL'</pre> In\u00a0[53]: Copied! <pre>from strplus.functions import *\n</pre> from strplus.functions import * In\u00a0[54]: Copied! <pre>to_camel(\"parse_to_camel\")\n</pre> to_camel(\"parse_to_camel\") Out[54]: <pre>'parseToCamel'</pre> In\u00a0[55]: Copied! <pre>to_snake(\"ThisIsAnotherTest\")\n</pre> to_snake(\"ThisIsAnotherTest\") Out[55]: <pre>'this_is_another_test'</pre> In\u00a0[56]: Copied! <pre>my_new_string = Str(\"Print me please, simple and easy!\")\n\nmy_new_string.print\n</pre> my_new_string = Str(\"Print me please, simple and easy!\")  my_new_string.print <pre>Print me please, simple and easy!\n</pre> In\u00a0[57]: Copied! <pre>for word in my_new_string.list:\n    word.print\n</pre> for word in my_new_string.list:     word.print <pre>Print\nme\nplease\nsimple\nand\neasy\n</pre> In\u00a0[2]: Copied! <pre>###Local Test\n# import os \n# import sys \n# sys.path.insert(0, os.path.abspath(\"../..\"))\n# sys.path.insert(0, os.path.abspath(\"..\"))\n</pre> ###Local Test # import os  # import sys  # sys.path.insert(0, os.path.abspath(\"../..\")) # sys.path.insert(0, os.path.abspath(\"..\"))"},{"location":"examples/examples_01/#examples","title":"Examples! \u2764\ufe0f\u00b6","text":""},{"location":"examples/examples_01/#extend-your-string-powers-with-str","title":"Extend your string powers with Str+ \ud83d\ude80\u00b6","text":"<p>Optional</p> <p>    Create a new virtualenv before start this notebook to be able to select it as the kernel, if you want!   </p> <p>Env setup \ud83d\udd27</p> <ul> <li><p>Create a new virtualenv.</p> <pre><code>pyenv virtualenv 3.9.16 .envStrPlus\npyenv activate .envStrPlus\npip install --upgrade pip\npip install ipykernel\n</code></pre> </li> <li><p>Delete the virtualenv.</p> <pre><code>pyenv deactivate .envStrPlus\npyenv virtualenv-delete -f .envStrPlus\n</code></pre> <p>should return empty</p> <pre><code>versions | grep .envStrPlus\n</code></pre> </li> </ul>"},{"location":"examples/examples_01/#required","title":"Required! \ud83d\udca2\u00b6","text":""},{"location":"examples/examples_01/#simples-use-no-parentheses-just-call","title":"Simples use \ud83d\ude0d no parentheses (), just call!\u00b6","text":""},{"location":"examples/examples_01/#use-like-normally-built-in-functions-with-parentheses","title":"Use like normally, built-in functions with parentheses () ! \ud83d\udd25\u00b6","text":""},{"location":"examples/examples_01/#snake-examples","title":"Snake examples \ud83d\udc0d\u00b6","text":""},{"location":"examples/examples_01/#pascal-examples","title":"Pascal examples \ud83d\udc2b\u00b6","text":""},{"location":"examples/examples_01/#camel","title":"Camel \ud83d\udc2a\u00b6","text":""},{"location":"examples/examples_01/#complex","title":"Complex \ud83d\udc7d\u00b6","text":""},{"location":"examples/examples_01/#common-behavior","title":"Common behavior \ud83d\udc4c\u00b6","text":""},{"location":"examples/examples_01/#just-use-a-specif-function-if-you-prefer","title":"Just use a specif function if you prefer!\ud83d\ude0f\u00b6","text":""},{"location":"examples/examples_01/#features","title":"Features \ud83d\udc95\u00b6","text":""},{"location":"examples/examples_01/#print-inside","title":"Print inside!\u00b6","text":""},{"location":"examples/examples_01/#for-running-from-the-local-github","title":"For running from the local GitHub\ud83d\udcc0\u00b6","text":""},{"location":"strplus/SUMMARY/","title":"package","text":"<ul> <li>cases</li> <li>functions</li> <li>strplus</li> </ul>"},{"location":"strplus/cases/","title":"Cases","text":""},{"location":"strplus/cases/#strplus.cases.to_camel","title":"<code>to_camel(text)</code>","text":"<p>Simple and efficient method to converts a string to camelCase.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input string.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The camelCase version of the input string.</p> <p>Examples:</p> <p>Converting strings to camelCase</p> <p>This example shows how to use <code>to_camel()</code> to convert strings to camelCase.</p> Example 1Example 2Example 3Example 4 <pre><code>to_camel('hello_world')\n'helloWorld'\n</code></pre> <pre><code>to_camel('PascalCase')\n'pascalCase'\n</code></pre> <pre><code>to_camel('some-mixed_string With spaces_underscores-and-hyphens')\n'someMixedStringWithSpacesUnderscoresAndHyphens'\n</code></pre> <pre><code>to_camel('123abc')\n'123abc'\n</code></pre> warning <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function will preserve any digits in the input string.</li> <li>If the input string already has camelCase formatting, the function will return it unchanged.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> \"See also\" <ul> <li><code>to_pascal()</code> - Converts a string to PascalCase formatting.</li> <li><code>to_snake()</code> - Converts a string to snake_case formatting.</li> </ul> Source code in <code>strplus/cases.py</code> <pre><code>def to_camel(text) -&gt; str:\n\"\"\"\n    Simple and efficient method to converts a string to camelCase.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The camelCase version of the input string.\n\n    Examples:\n        !!! example \"Converting strings to camelCase\"\n            This example shows how to use `to_camel()` to convert strings to camelCase.\n\n            === \"Example 1\"\n                ```python\n                to_camel('hello_world')\n                'helloWorld'\n                ```\n\n            === \"Example 2\"\n                ```python\n                to_camel('PascalCase')\n                'pascalCase'\n                ```\n\n            === \"Example 3\"\n                ```python\n                to_camel('some-mixed_string With spaces_underscores-and-hyphens')\n                'someMixedStringWithSpacesUnderscoresAndHyphens'\n                ```\n\n            === \"Example 4\"\n                ```python\n                to_camel('123abc')\n                '123abc'\n                ```\n\n    warning:\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function will preserve any digits in the input string.\n        - If the input string already has camelCase formatting, the function will return it unchanged.\n        - This function uses regular expressions to identify words in the input string.\n\n    tip: \"See also\"\n        - `to_pascal()` - Converts a string to PascalCase formatting.\n        - `to_snake()` - Converts a string to snake_case formatting.\n    \"\"\"\n\n    text = text.strip()\n\n    if not text:  # If the input string is empty, return an empty string\n        return \"\"\n\n    # Split the string into words using regex, split 1\n    words: str = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\" \\1\", re.sub(\"([A-Z]+)\", r\" \\1\", text)).split()], [])\n\n    # Capitalize the first letter of each word except the first word\n    capitalized_words: str = [words[0].lower()] + [word.capitalize() for word in words[1:]]\n\n    # Join the words back together to form the CamelCase string\n    check_01: str = \"\".join(capitalized_words)\n\n    # Final check\n    words: str = re.split(\"[-_]\", check_01)\n\n    return words[0] + \"\".join(word.capitalize() for word in words[1:]).replace(\"_\", \"\")\n</code></pre>"},{"location":"strplus/cases/#strplus.cases.to_list","title":"<code>to_list(text)</code>","text":"<p>Converts a string to a list of alphanumeric words.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input string to convert.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>A list of words extracted from the input string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; to_list(\"Hello world!\")\n['Hello', 'world']\n</code></pre> <pre><code>&gt;&gt;&gt; to_list(\"   another-string_123  \")\n['another', 'string', '123']\n</code></pre> <pre><code>&gt;&gt;&gt; to_list(\"   \")\n[]\n</code></pre> <pre><code>&gt;&gt;&gt; to_list(\"\")\n[]\n</code></pre> Source code in <code>strplus/cases.py</code> <pre><code>def to_list(text):\n\"\"\"Converts a string to a list of alphanumeric words.\n\n    Args:\n        text (str): The input string to convert.\n\n    Returns:\n        list: A list of words extracted from the input string.\n\n    Examples:\n        &gt;&gt;&gt; to_list(\"Hello world!\")\n        ['Hello', 'world']\n\n        &gt;&gt;&gt; to_list(\"   another-string_123  \")\n        ['another', 'string', '123']\n\n        &gt;&gt;&gt; to_list(\"   \")\n        []\n\n        &gt;&gt;&gt; to_list(\"\")\n        []\n    \"\"\"\n    text = text.strip()\n\n    if not text:  # If the input string is empty or only whitespace, return an empty string\n        return []\n\n    # Remove any non-alphanumeric characters and split the string into words\n    word_list = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\"_\\1\", re.sub(\"([A-Z]+)\", r\"_\\1\", text)).split()], [])\n\n    return word_list\n</code></pre>"},{"location":"strplus/cases/#strplus.cases.to_pascal","title":"<code>to_pascal(text)</code>","text":"<p>Simple and efficient method to converts a string to PascalCase.</p> <p>text (str): The input string.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The PascalCase version of the input string.</p> <p>Examples:</p> <p>Converting strings to PascalCase</p> <p>This example shows how to use <code>to_pascal()</code> to convert strings to PascalCase.</p> Example 1Example 2Example 3Example 4 <pre><code>to_pascal('hello_world')\n'HelloWorld'\n</code></pre> <pre><code>to_pascal('CamelCase')\n'CamelCase'\n</code></pre> <pre><code>to_pascal('some-mixed_string With spaces_underscores-and-hyphens')\n'SomeMixedStringWithSpacesUnderscoresAndHyphens'\n</code></pre> <pre><code>to_pascal('123abc')\n'123abc'\n</code></pre> warning <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function will preserve any digits in the input string.</li> <li>If the input string already has PascalCase formatting, the function will return it unchanged.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> \"See also\" <ul> <li><code>to_camel()</code> - Converts a string to camelCase formatting.</li> <li><code>to_snake()</code> - Converts a string to snake_case formatting.</li> </ul> Source code in <code>strplus/cases.py</code> <pre><code>def to_pascal(text: str) -&gt; str:\n\"\"\"\n    Simple and efficient method to converts a string to PascalCase.\n\n    Args:\n    text (str): The input string.\n\n    Returns:\n        str: The PascalCase version of the input string.\n\n    Examples:\n        !!! example \"Converting strings to PascalCase\"\n            This example shows how to use `to_pascal()` to convert strings to PascalCase.\n\n            === \"Example 1\"\n                ```python\n                to_pascal('hello_world')\n                'HelloWorld'\n                ```\n\n            === \"Example 2\"\n                ```python\n                to_pascal('CamelCase')\n                'CamelCase'\n                ```\n\n            === \"Example 3\"\n                ```python\n                to_pascal('some-mixed_string With spaces_underscores-and-hyphens')\n                'SomeMixedStringWithSpacesUnderscoresAndHyphens'\n                ```\n\n            === \"Example 4\"\n                ```python\n                to_pascal('123abc')\n                '123abc'\n                ```\n    warning:\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function will preserve any digits in the input string.\n        - If the input string already has PascalCase formatting, the function will return it unchanged.\n        - This function uses regular expressions to identify words in the input string.\n\n    tip: \"See also\"\n        - `to_camel()` - Converts a string to camelCase formatting.\n        - `to_snake()` - Converts a string to snake_case formatting.\n\n    \"\"\"\n    text = text.strip()\n\n    if not text:  # If the input string is empty or only whitespace, return an empty string\n        return \"\"\n\n    # Remove any underscores, hyphens, or spaces and split the string into words\n    words = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\" \\1\", re.sub(\"([A-Z]+)\", r\" \\1\", text)).split()], [])\n\n    # Capitalize the first letter of each word except the first word\n    capitalized_words = []\n    for i, word in enumerate(words):\n        if i == 0 and word[0].isdigit():\n            capitalized_words.append(str(word[0]))\n            word = word[1:]\n        capitalized_words.append(word.capitalize())\n\n    # Join the words back together to form the CamelCase string\n    return \"\".join(capitalized_words)\n</code></pre>"},{"location":"strplus/cases/#strplus.cases.to_snake","title":"<code>to_snake(text)</code>","text":"<p>Converts a string to snake_case.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>The input string.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The snake_case version of the input string.</p> <p>Examples:</p> <p>Converting strings to snake_case</p> <p>This example shows how to use <code>to_snake()</code> to convert strings to snake_case.</p> Example 1Example 2Example 3 <pre><code>to_snake('helloWorld')\n'hello_world'\n</code></pre> <pre><code>to_snake('Some-Mixed_string With spaces-underscores-and-hyphens')\n'some_mixed_string_with_spaces_underscores_and_hyphens'\n</code></pre> <pre><code>to_snake('CamelCase')\n'camel_case'\n</code></pre> Warning <ul> <li>For best results, avoid using punctuation or non-alphanumeric characters in the input string.</li> <li>This function will convert any uppercase letters to lowercase, and separate words with underscores.</li> <li>If the input string already has snake_case formatting, the function will return it unchanged.</li> <li>This function uses regular expressions to identify words in the input string.</li> </ul> Tips <ul> <li><code>to_camel()</code> - Converts a string to camelCase formatting.</li> <li><code>to_pascal()</code> - Converts a string to PascalCase formatting.</li> </ul> Source code in <code>strplus/cases.py</code> <pre><code>def to_snake(text) -&gt; str:\n\"\"\"\n    Converts a string to snake_case.\n\n    Args:\n        text (str): The input string.\n\n    Returns:\n        str: The snake_case version of the input string.\n\n    Examples:\n        !!! example \"Converting strings to snake_case\"\n            This example shows how to use `to_snake()` to convert strings to snake_case.\n\n            === \"Example 1\"\n                ```python\n                to_snake('helloWorld')\n                'hello_world'\n                ```\n\n            === \"Example 2\"\n                ```python\n                to_snake('Some-Mixed_string With spaces-underscores-and-hyphens')\n                'some_mixed_string_with_spaces_underscores_and_hyphens'\n                ```\n\n            === \"Example 3\"\n                ```python\n                to_snake('CamelCase')\n                'camel_case'\n                ```\n\n    Warning:\n        - For best results, avoid using punctuation or non-alphanumeric characters in the input string.\n        - This function will convert any uppercase letters to lowercase, and separate words with underscores.\n        - If the input string already has snake_case formatting, the function will return it unchanged.\n        - This function uses regular expressions to identify words in the input string.\n\n    Tips:\n        - `to_camel()` - Converts a string to camelCase formatting.\n        - `to_pascal()` - Converts a string to PascalCase formatting.\n    \"\"\"\n\n    text = text.strip()\n\n    if not text:\n        # If the input string is empty or only whitespace, return an empty string\n        return \"\"\n\n    # Remove any non-alphanumeric characters and split the string into words\n    words = sum([re.findall(r\"[a-zA-Z0-9]+\", word) for word in re.sub(\"([A-Z][a-z]+)\", r\"_\\1\", re.sub(\"([A-Z]+)\", r\"_\\1\", text)).split()], [])\n\n    # Join the words back together to form the snake_case string\n    return \"_\".join([word.lower() for word in words])\n</code></pre>"},{"location":"strplus/functions/","title":"Functions","text":""},{"location":"strplus/functions/#strplus.functions.get_separator","title":"<code>get_separator(input_string)</code>","text":"<p>get_separator summary</p> <p>extended_summary</p> <p>:param input_string: description :type input_string: type :return: description :rtype: type</p> Source code in <code>strplus/functions.py</code> <pre><code>def get_separator(input_string):\n\"\"\"get_separator _summary_\n\n    _extended_summary_\n\n    :param input_string: _description_\n    :type input_string: _type_\n    :return: _description_\n    :rtype: _type_\n    \"\"\"\n    separators = [\",\", \";\", \"|\", \" \", \"\\t\", \":\", \"/\", \"\\\\\", \"\\n\"]\n\n    # check each separator in the order of priority\n    for sep in [\",\", \";\", \"|\", \" \", \"\\t\", \":\", \"/\", \"\\\\\", \"\\n\"]:\n        if sep in input_string:\n            sep_count = input_string.count(sep)\n            if sep_count == 1:\n                return sep\n            elif sep_count &gt; 1:\n                return max(separators, key=input_string.count)\n\n    # if no separator was found, return None\n    return None\n</code></pre>"},{"location":"strplus/strplus/","title":"Strplus","text":""},{"location":"strplus/strplus/#strplus.strplus.Str","title":"<code>Str</code>","text":"<p>         Bases: <code>str</code></p> <p>Info</p> <p>The Str Class is a Wrapper class that extends the str Class, giving it superpowers to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want! All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.</p> <p>Never was so easy! Simple no parentheses! </p> Snake caseCamel casePascal <p><pre><code>my_string = Str(\"Cast_this_StringToSnake\")\n\nmy_string.snake\n</code></pre> 'cast_this_string_to_snake'</p> <p><pre><code>my_string = Str(\"cast_this_string_to_camel\")\n\nmy_string.camel\n</code></pre> 'castThisStringToCamel'</p> <p><pre><code>my_string = Str(\"Cast_this_string_TO_Pascal!\")\n\nmy_string.pascal\n</code></pre> 'CastThisStringToPascal'</p> <p>Use parentheses if you prefer!</p> Snake case <p><pre><code>my_string = Str(\"HelloWorld\")\n\nmy_string.to_snake()\n</code></pre> 'hello_world'</p> Source code in <code>strplus/strplus.py</code> <pre><code>class Str(str):\n\"\"\"\n\n    !!! info\n\n        The Str Class is a Wrapper class that extends the str Class, giving it superpowers\n        to handle strings and making it easy to use the strplus functions! You don't need to import, only if you want!\n        All methods from Str are recursive and return the Str object itself, so you always have the same features in the result.\n\n    !!! example \"Never was so easy! Simple no parentheses! \"\n\n        === \"Snake case\"\n            ```python\n            my_string = Str(\"Cast_this_StringToSnake\")\n\n            my_string.snake\n            ```\n            'cast_this_string_to_snake'\n\n        === \"Camel case\"\n            ```python\n            my_string = Str(\"cast_this_string_to_camel\")\n\n            my_string.camel\n            ```\n            'castThisStringToCamel'\n\n        === \"Pascal\"\n            ```python\n            my_string = Str(\"Cast_this_string_TO_Pascal!\")\n\n            my_string.pascal\n            ```\n            'CastThisStringToPascal'\n\n\n    !!! tip \"Use parentheses if you prefer!\"\n\n        === \"Snake case\"\n            ```python\n            my_string = Str(\"HelloWorld\")\n\n            my_string.to_snake()\n\n            ```\n            'hello_world'\n    \"\"\"\n\n    def __new__(cls, *args, **kwargs):\n        if not all(isinstance(arg, str) for arg in args):\n            raise TypeError(\"Str argument must be a string\")\n        return super().__new__(cls, *args, **kwargs)\n\n    def __init__(self, *args, **kwargs):\n        super().__init__()\n\n        def __new__(cls, *args, **kwargs):\n            return super().__new__(cls, *args, **kwargs)\n\n    @property\n    def pascal(self):\n        return self.to_pascal()\n\n    @property\n    def camel(self):\n        return self.to_camel()\n\n    @property\n    def snake(self):\n        return self.to_snake()\n\n    @property\n    def list(self):\n        return self.to_list()\n\n    @property\n    def print(self):\n        print(self)\n\n    def to_pascal(self):\n\"\"\"\n        !!! info\n            Simple method to converts a string to PascalCase.\n            Extend the method: to_pascal\n\n        Returns:\n            str: The PascalCase version of the input string.\n\n\n        !!! example\n\n            ```python\n            my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n\n            my_string.to_pascal()\n            ```\n            'SomeMixedStringWithSpacesUnderscoresAndHyphens'\n\n        \"\"\"\n        return Str(to_pascal(self))\n\n    def to_camel(self):\n\"\"\"Converts a string from any case to CamelCase.\n\n        Returns:\n            str: The converted string in CamelCase.\n\n        Examples:\n\n            &gt;&gt;&gt; my_string = Str('this_is-an_example')\n            &gt;&gt;&gt; my_string.to_camel()\n            'thisIsAnExample'\n\n            &gt;&gt;&gt; my_string = Str('This is a test!')\n            &gt;&gt;&gt; my_string.to_camel()\n            'thisIsATest'\n\n        \"\"\"\n        return Str(to_camel(self))\n\n    def to_snake(self):\n\"\"\"Converts a string to snake_case.\n\n        Returns:\n            str: The string converted to snake_case.\n\n        Examples:\n\n            &gt;&gt;&gt; my_string = Str(\"HelloWorld\")\n            &gt;&gt;&gt; my_string.snake(\"HelloWorld\")\n            'hello_world'\n\n            &gt;&gt;&gt; my_string = Str(\"  AnotherString!  \")\n            &gt;&gt;&gt; my_string.to_snake()\n            'another_string'\n\n            &gt;&gt;&gt;  my_string = Str(\"hello-world\")\n            &gt;&gt;&gt; my_string.to_snake()\n            'hello_world'\n\n        \"\"\"\n        return Str(to_snake(self))\n\n    def to_list(self):\n        return [Str(word) for word in to_list(self)]\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.to_camel","title":"<code>to_camel()</code>","text":"<p>Converts a string from any case to CamelCase.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The converted string in CamelCase.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; my_string = Str('this_is-an_example')\n&gt;&gt;&gt; my_string.to_camel()\n'thisIsAnExample'\n</code></pre> <pre><code>&gt;&gt;&gt; my_string = Str('This is a test!')\n&gt;&gt;&gt; my_string.to_camel()\n'thisIsATest'\n</code></pre> Source code in <code>strplus/strplus.py</code> <pre><code>def to_camel(self):\n\"\"\"Converts a string from any case to CamelCase.\n\n    Returns:\n        str: The converted string in CamelCase.\n\n    Examples:\n\n        &gt;&gt;&gt; my_string = Str('this_is-an_example')\n        &gt;&gt;&gt; my_string.to_camel()\n        'thisIsAnExample'\n\n        &gt;&gt;&gt; my_string = Str('This is a test!')\n        &gt;&gt;&gt; my_string.to_camel()\n        'thisIsATest'\n\n    \"\"\"\n    return Str(to_camel(self))\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.to_pascal","title":"<code>to_pascal()</code>","text":"<p>Info</p> <p>Simple method to converts a string to PascalCase. Extend the method: to_pascal</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The PascalCase version of the input string.</p> <p>Example</p> <p><pre><code>my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n\nmy_string.to_pascal()\n</code></pre> 'SomeMixedStringWithSpacesUnderscoresAndHyphens'</p> Source code in <code>strplus/strplus.py</code> <pre><code>def to_pascal(self):\n\"\"\"\n    !!! info\n        Simple method to converts a string to PascalCase.\n        Extend the method: to_pascal\n\n    Returns:\n        str: The PascalCase version of the input string.\n\n\n    !!! example\n\n        ```python\n        my_string = Str('some-mixed_string With spaces_underscores-and-hyphens')\n\n        my_string.to_pascal()\n        ```\n        'SomeMixedStringWithSpacesUnderscoresAndHyphens'\n\n    \"\"\"\n    return Str(to_pascal(self))\n</code></pre>"},{"location":"strplus/strplus/#strplus.strplus.Str.to_snake","title":"<code>to_snake()</code>","text":"<p>Converts a string to snake_case.</p> <p>Returns:</p> Name Type Description <code>str</code> <p>The string converted to snake_case.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; my_string = Str(\"HelloWorld\")\n&gt;&gt;&gt; my_string.snake(\"HelloWorld\")\n'hello_world'\n</code></pre> <pre><code>&gt;&gt;&gt; my_string = Str(\"  AnotherString!  \")\n&gt;&gt;&gt; my_string.to_snake()\n'another_string'\n</code></pre> <pre><code>&gt;&gt;&gt;  my_string = Str(\"hello-world\")\n&gt;&gt;&gt; my_string.to_snake()\n'hello_world'\n</code></pre> Source code in <code>strplus/strplus.py</code> <pre><code>def to_snake(self):\n\"\"\"Converts a string to snake_case.\n\n    Returns:\n        str: The string converted to snake_case.\n\n    Examples:\n\n        &gt;&gt;&gt; my_string = Str(\"HelloWorld\")\n        &gt;&gt;&gt; my_string.snake(\"HelloWorld\")\n        'hello_world'\n\n        &gt;&gt;&gt; my_string = Str(\"  AnotherString!  \")\n        &gt;&gt;&gt; my_string.to_snake()\n        'another_string'\n\n        &gt;&gt;&gt;  my_string = Str(\"hello-world\")\n        &gt;&gt;&gt; my_string.to_snake()\n        'hello_world'\n\n    \"\"\"\n    return Str(to_snake(self))\n</code></pre>"}]}